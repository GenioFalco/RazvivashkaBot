from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.daily_tasks import DailyTasksKeyboard
from keyboards.main_menu import MainMenuKeyboard
from database.database import Database
import random

router = Router()

@router.callback_query(F.data == "daily_tasks")
async def show_daily_tasks_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    db = Database()
    tasks, completed = await db.get_user_daily_tasks(callback.from_user.id)
    
    if completed == 5:
        text = (
            "üåü –£—Ö —Ç—ã, —Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
            "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π –¥–Ω—è! üíñ\n\n"
            "–ó–∞–≤—Ç—Ä–∞ —è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è."
        )
        markup = DailyTasksKeyboard.get_back_button()
    else:
        text = (
            "üåû –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å¬ª!\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±—è –∂–¥—É—Ç 5 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. "
            "–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∑–≤—ë–∑–¥–æ—á–∫—É ‚≠ê\n"
            "–ê –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É! üèÜ\n\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed}/5"
        )
        markup = DailyTasksKeyboard.get_main_keyboard()
    
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data == "show_daily_tasks")
async def show_next_task(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    db = Database()
    tasks, completed = await db.get_user_daily_tasks(callback.from_user.id)
    
    if completed == 5:
        text = (
            "üåü –£—Ö —Ç—ã, —Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
            "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π –¥–Ω—è! üíñ\n\n"
            "–ó–∞–≤—Ç—Ä–∞ —è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è."
        )
        markup = DailyTasksKeyboard.get_back_button()
    else:
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        next_task = next((task for task in tasks if not task['completed']), None)
        if next_task:
            text = (
                f"üìù –ó–∞–¥–∞–Ω–∏–µ {completed + 1} –∏–∑ 5:\n\n"
                f"{next_task['text']}\n\n"
                "–ù–∞–∂–º–∏ ¬´–°–¥–µ–ª–∞–ª¬ª, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å –∑–∞–¥–∞–Ω–∏–µ!"
            )
            markup = DailyTasksKeyboard.get_task_keyboard(next_task['id'])
        else:
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è."
            markup = DailyTasksKeyboard.get_back_button()
    
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    task_id = int(callback.data.split("_")[2])
    db = Database()
    
    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    success = await db.complete_daily_task(callback.from_user.id, task_id)
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        tasks, completed = await db.get_user_daily_tasks(callback.from_user.id)
        
        if completed == 5:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä-–ø—Ä–∏–∑ (—Ç–æ–∫–µ–Ω —Å id=8)
            super_token = await db.get_token_by_id(8)
            text = (
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
                f"–í –Ω–∞–≥—Ä–∞–¥—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Å–æ–±—ã–π –ø—Ä–∏–∑: {super_token['emoji']} {super_token['name']}!\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏! üåü"
            )
            markup = InlineKeyboardBuilder()
            markup.add(InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            markup = markup.as_markup()
        else:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–æ–∫–µ–Ω
            tokens = await db.get_all_tokens()
            token = next((t for t in tokens if t['id'] == 2), None)
            text = f"–ó–¥–æ—Ä–æ–≤–æ! –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {token['emoji']} {token['name']}! –°–æ–±–µ—Ä–µ—à—å –µ—â–µ –±–æ–ª—å—à–µ?"
            markup = DailyTasksKeyboard.get_main_keyboard()
    else:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        markup = DailyTasksKeyboard.get_main_keyboard()
    
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data.startswith("skip_task_"))
async def skip_task(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ"""
    current_task_id = int(callback.data.split("_")[2])
    db = Database()
    tasks, completed = await db.get_user_daily_tasks(callback.from_user.id)
    
    if completed == 5:
        text = (
            "üåü –£—Ö —Ç—ã, —Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
            "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π –¥–Ω—è! üíñ\n\n"
            "–ó–∞–≤—Ç—Ä–∞ —è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è."
        )
        markup = DailyTasksKeyboard.get_back_button()
    else:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        uncompleted_tasks = [task for task in tasks if not task['completed'] and task['id'] != current_task_id]
        
        if uncompleted_tasks:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
            next_task = random.choice(uncompleted_tasks)
            text = (
                "–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—Ç–æ–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å—Ç–∞—Ä–∞—Ç—å—Å—è! "
                "–î–µ—Ä–∂–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üêæ\n\n"
                f"üìù –ó–∞–¥–∞–Ω–∏–µ {completed + 1} –∏–∑ 5:\n\n"
                f"{next_task['text']}\n\n"
                "–ù–∞–∂–º–∏ ¬´–°–¥–µ–ª–∞–ª¬ª, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å –∑–∞–¥–∞–Ω–∏–µ!"
            )
            markup = DailyTasksKeyboard.get_task_keyboard(next_task['id'])
        else:
            text = "–î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è —è –ø–æ–∫–∞ –¥–∞—Ç—å –Ω–µ –º–æ–≥—É, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç."
            markup = DailyTasksKeyboard.get_back_button()
    
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data.in_({"back_to_daily_tasks", "back_to_main"}))
async def process_back_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" """
    if callback.data == "back_to_main":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
        )
    else:
        await show_daily_tasks_menu(callback)
    await callback.answer() 