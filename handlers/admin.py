from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import Database
from keyboards.admin import AdminKeyboard
from keyboards.main_menu import MainMenuKeyboard
from config import config
import math

router = Router()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
class TariffStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_price = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentStates(StatesGroup):
    waiting_for_puzzle_image = State()
    waiting_for_puzzle_answers = State()
    waiting_for_twister = State()
    waiting_for_riddle = State()
    waiting_for_riddle_answer = State()
    waiting_for_daily_task = State()
    waiting_for_creativity_title = State()
    waiting_for_creativity_description = State()
    waiting_for_creativity_video = State()
    waiting_for_exercise_title = State()
    waiting_for_exercise_description = State()
    waiting_for_exercise_video = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
class TokenStates(StatesGroup):
    waiting_for_emoji = State()
    waiting_for_name = State()

ITEMS_PER_PAGE = 5

@router.callback_query(F.data == "admin_panel")
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∂–µ—Ç–æ–Ω–∞–º–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=AdminKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def show_users_list(callback: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    db = Database()
    users = await db.get_all_users()
    
    total_pages = math.ceil(len(users) / ITEMS_PER_PAGE)
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    
    current_users = users[start_idx:end_idx]
    
    await callback.message.edit_text(
        f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=AdminKeyboard.get_users_keyboard(current_users, page, total_pages)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("users_page_"))
async def navigate_users(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    page = int(callback.data.split("_")[2])
    await show_users_list(callback, page)

@router.callback_query(F.data == "admin_subscriptions")
async def show_subscriptions_list(callback: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    db = Database()
    subscriptions = await db.get_all_user_subscriptions()
    
    total_pages = math.ceil(len(subscriptions) / ITEMS_PER_PAGE)
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    
    current_subscriptions = subscriptions[start_idx:end_idx]
    
    await callback.message.edit_text(
        f"üí≥ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=AdminKeyboard.get_subscriptions_keyboard(current_subscriptions, page, total_pages)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("subs_page_"))
async def navigate_subscriptions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–¥–ø–∏—Å–æ–∫"""
    page = int(callback.data.split("_")[2])
    await show_subscriptions_list(callback, page)

@router.callback_query(F.data == "manage_tariffs")
async def show_tariffs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    db = Database()
    tariffs = await db.get_all_subscriptions()
    
    await callback.message.edit_text(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=AdminKeyboard.get_tariffs_keyboard(tariffs)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_tariff_"))
async def edit_tariff(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_id = int(callback.data.split("_")[2])
    await state.update_data(tariff_id=tariff_id)
    await state.set_state(TariffStates.waiting_for_name)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:"
    )
    await callback.answer()

@router.message(TariffStates.waiting_for_name)
async def process_tariff_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.update_data(new_name=message.text)
    await state.set_state(TariffStates.waiting_for_price)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ (–≤ —Ä—É–±–ª—è—Ö):")

@router.message(TariffStates.waiting_for_price)
async def process_tariff_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        price = int(message.text)
        data = await state.get_data()
        
        db = Database()
        await db.update_subscription(
            data['tariff_id'],
            data['new_name'],
            price
        )
        
        await state.clear()
        await message.answer(
            "‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=AdminKeyboard.get_menu_keyboard()
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

@router.callback_query(F.data == "admin_content")
async def show_content_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=AdminKeyboard.get_content_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("show_content:"))
async def show_content_list(callback: CallbackQuery, state: FSMContext):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
    parts = callback.data.split(":")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if len(parts) == 4 and parts[1] == "creativity":
        content_type = f"creativity_{parts[2]}"
        page = int(parts[3])
    else:
        content_type = parts[1]
        page = int(parts[2]) if len(parts) > 2 else 1
    
    db = Database()
    items = []
    
    if content_type == "daily":
        items = await db.get_all_daily_tasks()
    elif content_type == "riddles":
        items = await db.get_all_riddles()
    elif content_type == "twisters":
        items = await db.get_all_tongue_twisters()
    elif content_type == "puzzles":
        items = await db.get_all_puzzles()
    elif content_type.startswith("creativity_"):
        creativity_type = content_type.split("_")[1]
        items = await db.get_all_creativity(creativity_type)
    elif content_type == "articular":
        items = await db.get_exercise_videos("articular")
    elif content_type == "neuro":
        items = await db.get_exercise_videos("neuro")

    total_pages = math.ceil(len(items) / ITEMS_PER_PAGE)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    keyboard = AdminKeyboard.get_content_list_keyboard(items, page, total_pages, content_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    headers = {
        "daily": "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å",
        "riddles": "ü§î –°–ø–∏—Å–æ–∫ –∑–∞–≥–∞–¥–æ–∫",
        "twisters": "üëÖ –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫",
        "puzzles": "üß© –°–ø–∏—Å–æ–∫ —Ä–µ–±—É—Å–æ–≤",
        "creativity_drawing": "üé® –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é",
        "creativity_paper": "üìÑ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ –±—É–º–∞–≥–µ",
        "creativity_sculpting": "üè∫ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ –ª–µ–ø–∫–µ",
        "articular": "üó£ –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏",
        "neuro": "üß† –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"
    }
    
    header = headers.get(content_type, "üìã –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    await callback.message.edit_text(
        text=f"{header}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("admin_add_content:"))
async def start_content_addition(callback: CallbackQuery, state: FSMContext):
    content_type = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(content_type=content_type)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    messages = {
        "daily": "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å:",
        "riddles": "ü§î –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ | (–ø—Ä–∏–º–µ—Ä: –ó–∞–≥–∞–¥–∫–∞|–û—Ç–≤–µ—Ç):",
        "twisters": "üëÖ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏:",
        "puzzles": "üß© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–±—É—Å–∞:",
        "creativity_drawing": "üé® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é:",
        "creativity_paper": "üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –ø–æ –±—É–º–∞–≥–µ:",
        "creativity_sculpting": "üè∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –ø–æ –ª–µ–ø–∫–µ:",
        "articular": "üó£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏:",
        "neuro": "üß† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –Ω–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏:"
    }
    
    message = messages.get(content_type, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    states = {
        "daily": ContentStates.waiting_for_daily_task,
        "riddles": ContentStates.waiting_for_riddle,
        "twisters": ContentStates.waiting_for_twister,
        "puzzles": ContentStates.waiting_for_puzzle_image,
        "creativity_drawing": ContentStates.waiting_for_creativity_title,
        "creativity_paper": ContentStates.waiting_for_creativity_title,
        "creativity_sculpting": ContentStates.waiting_for_creativity_title,
        "articular": ContentStates.waiting_for_exercise_title,
        "neuro": ContentStates.waiting_for_exercise_title
    }
    
    await state.set_state(states.get(content_type))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    await callback.message.edit_text(
        text=message,
        reply_markup=AdminKeyboard.get_cancel_keyboard()
    )

@router.message(ContentStates.waiting_for_puzzle_image)
async def process_puzzle_image(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–±—É—Å–∞")
        return
        
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_bytes = await message.bot.download_file(file.file_path)
    
    await state.update_data(puzzle_image=file_bytes.read())
    await state.set_state(ContentStates.waiting_for_puzzle_answers)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

@router.message(ContentStates.waiting_for_puzzle_answers)
async def process_puzzle_answers(message: Message, state: FSMContext):
    answers = [answer.strip() for answer in message.text.split(",")]
    if len(answers) != 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–≤–Ω–æ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        return
        
    data = await state.get_data()
    image_bytes = data["puzzle_image"]
    
    db = Database()
    try:
        await db.add_puzzle(image_bytes, answers[0], answers[1], answers[2])
        await message.answer("‚úÖ –†–µ–±—É—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±—É—Å–∞: {str(e)}")
    
    await state.clear()

@router.message(ContentStates.waiting_for_twister)
async def process_twister(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏"""
    db = Database()
    await db.add_tongue_twister(message.text)
    
    await state.clear()
    await message.answer(
        "‚úÖ –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=AdminKeyboard.get_menu_keyboard()
    )

@router.message(ContentStates.waiting_for_riddle)
async def process_riddle(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–∞–¥–∫–∏"""
    await state.update_data(riddle_text=message.text)
    await state.set_state(ContentStates.waiting_for_riddle_answer)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É:")

@router.message(ContentStates.waiting_for_riddle_answer)
async def process_riddle_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É"""
    data = await state.get_data()
    
    db = Database()
    await db.add_riddle(data['riddle_text'], message.text)
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–≥–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=AdminKeyboard.get_menu_keyboard()
    )

@router.message(ContentStates.waiting_for_daily_task)
async def process_daily_task(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    db = Database()
    await db.add_daily_task(message.text)
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
        reply_markup=AdminKeyboard.get_menu_keyboard()
    )

@router.callback_query(F.data.in_({"back_to_admin", "back_to_content", "back_to_subscriptions"}))
async def process_back_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" """
    if callback.data == "back_to_admin":
        await show_admin_menu(callback)
    elif callback.data == "back_to_content":
        await show_content_menu(callback)
    elif callback.data == "back_to_subscriptions":
        await show_subscriptions_list(callback)

@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=AdminKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    await state.clear()
    await callback.message.edit_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=AdminKeyboard.get_menu_keyboard()
    )

@router.callback_query(F.data == "back_to_content_menu")
async def back_to_content_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    await state.clear()
    await callback.message.edit_text(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=AdminKeyboard.get_content_keyboard()
    )

@router.message(ContentStates.waiting_for_exercise_title)
async def process_exercise_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(ContentStates.waiting_for_exercise_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")

@router.message(ContentStates.waiting_for_exercise_description)
async def process_exercise_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(ContentStates.waiting_for_exercise_video)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")

@router.message(ContentStates.waiting_for_exercise_video)
async def process_exercise_video(message: Message, state: FSMContext):
    data = await state.get_data()
    db = Database()
    try:
        await db.add_exercise_video(
            data['title'], 
            data['description'], 
            message.text,
            data['content_type']
        )
        await message.answer("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {str(e)}")
    await state.clear()

@router.message(ContentStates.waiting_for_creativity_title)
async def process_creativity_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞"""
    data = await state.get_data()
    await state.update_data(title=message.text)
    await state.set_state(ContentStates.waiting_for_creativity_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:")

@router.message(ContentStates.waiting_for_creativity_description)
async def process_creativity_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞"""
    await state.update_data(description=message.text)
    await state.set_state(ContentStates.waiting_for_creativity_video)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:")

@router.message(ContentStates.waiting_for_creativity_video)
async def process_creativity_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞"""
    data = await state.get_data()
    content_type = data.get('content_type')
    creativity_type = content_type.split('_')[1] if content_type else None
    
    db = Database()
    try:
        await db.add_creativity_video(
            title=data['title'],
            description=data['description'],
            video_url=message.text,
            video_type=creativity_type
        )
        await message.answer(
            "‚úÖ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=AdminKeyboard.get_menu_keyboard()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data.startswith("delete_content:"))
async def delete_content_confirmation(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ id
    _, content_type, content_id = callback.data.split(":")
    
    await callback.message.edit_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=AdminKeyboard.get_delete_confirmation_keyboard(content_type, content_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_content(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ id
    _, content_type, content_id = callback.data.split(":")
    content_id = int(content_id)
    
    db = Database()
    if await db.delete_content(content_type, content_id):
        await callback.answer("‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ
        items = []
        if content_type == "daily":
            items = await db.get_all_daily_tasks()
        elif content_type == "riddles":
            items = await db.get_all_riddles()
        elif content_type == "twisters":
            items = await db.get_all_tongue_twisters()
        elif content_type == "puzzles":
            items = await db.get_all_puzzles()
        elif content_type.startswith("creativity_"):
            creativity_type = content_type.split("_")[1]
            items = await db.get_all_creativity(creativity_type)
        elif content_type == "articular":
            items = await db.get_exercise_videos("articular")
        elif content_type == "neuro":
            items = await db.get_exercise_videos("neuro")
        
        total_pages = math.ceil(len(items) / ITEMS_PER_PAGE)
        current_page = 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        headers = {
            "daily": "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å",
            "riddles": "ü§î –°–ø–∏—Å–æ–∫ –∑–∞–≥–∞–¥–æ–∫",
            "twisters": "üëÖ –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫",
            "puzzles": "üß© –°–ø–∏—Å–æ–∫ —Ä–µ–±—É—Å–æ–≤",
            "creativity_drawing": "üé® –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é",
            "creativity_paper": "üìÑ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ –±—É–º–∞–≥–µ",
            "creativity_sculpting": "üè∫ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ –ª–µ–ø–∫–µ",
            "articular": "üó£ –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏",
            "neuro": "üß† –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"
        }
        
        header = headers.get(content_type, "üìã –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        await callback.message.edit_text(
            text=f"{header}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}",
            reply_markup=AdminKeyboard.get_content_list_keyboard(items, current_page, total_pages, content_type)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞", show_alert=True)

@router.callback_query(F.data.startswith("view_content:"))
async def view_content(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ id
    _, content_type, content_id = callback.data.split(":")
    content_id = int(content_id)
    
    db = Database()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await callback.answer("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", show_alert=True)

@router.callback_query(F.data == "admin_tokens")
async def show_tokens_list(callback: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    db = Database()
    tokens = await db.get_all_tokens()
    
    total_pages = math.ceil(len(tokens) / ITEMS_PER_PAGE)
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    
    current_tokens = tokens[start_idx:end_idx]
    
    await callback.message.edit_text(
        f"üèÜ –°–ø–∏—Å–æ–∫ –∂–µ—Ç–æ–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=AdminKeyboard.get_tokens_keyboard(current_tokens, page, total_pages)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("tokens_page_"))
async def navigate_tokens(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∂–µ—Ç–æ–Ω–æ–≤"""
    page = int(callback.data.split("_")[2])
    await show_tokens_list(callback, page)

@router.callback_query(F.data.startswith("token_"))
async def edit_token(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    token_id = int(callback.data.split("_")[1])
    await state.update_data(token_id=token_id)
    await state.set_state(TokenStates.waiting_for_emoji)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:\n\n"
        "üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏\n"
        "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ü–∏—Ñ—Ä—ã\n\n"
        "‚ú® –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ üåü - –∑–≤–µ–∑–¥–∞\n"
        "‚Ä¢ üé® - –ø–∞–ª–∏—Ç—Ä–∞\n"
        "‚Ä¢ üéØ - –º–∏—à–µ–Ω—å\n"
        "‚Ä¢ üèÜ - –∫—É–±–æ–∫\n"
        "‚Ä¢ üéÆ - –≥–µ–π–º–ø–∞–¥",
        reply_markup=AdminKeyboard.get_cancel_keyboard()
    )
    await callback.answer()

@router.message(TokenStates.waiting_for_emoji)
async def process_token_emoji(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    db = Database()
    if not db.is_valid_emoji(message.text):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏\n\n"
            "‚ú® –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ üåü - –∑–≤–µ–∑–¥–∞\n"
            "‚Ä¢ üé® - –ø–∞–ª–∏—Ç—Ä–∞\n"
            "‚Ä¢ üéØ - –º–∏—à–µ–Ω—å\n"
            "‚Ä¢ üèÜ - –∫—É–±–æ–∫\n"
            "‚Ä¢ üéÆ - –≥–µ–π–º–ø–∞–¥"
        )
        return
    
    await state.update_data(emoji=message.text)
    await state.set_state(TokenStates.waiting_for_name)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:\n\n"
        "üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n\n"
        "‚ú® –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ó–≤–µ–∑–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ –ö—É–±–æ–∫ –º–∞—Å—Ç–µ—Ä–∞\n"
        "‚Ä¢ –ó–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è\n"
        "‚Ä¢ –ú–µ–¥–∞–ª—å —É—Å–ø–µ—Ö–∞"
    )

@router.message(TokenStates.waiting_for_name)
async def process_token_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    db = Database()
    if not db.is_valid_name(message.text):
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n\n"
            "üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º\n\n"
            "‚ú® –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ó–≤–µ–∑–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ö—É–±–æ–∫ –º–∞—Å—Ç–µ—Ä–∞\n"
            "‚Ä¢ –ó–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è\n"
            "‚Ä¢ –ú–µ–¥–∞–ª—å —É—Å–ø–µ—Ö–∞"
        )
        return
    
    data = await state.get_data()
    token_id = data['token_id']
    new_emoji = data['emoji']
    new_name = message.text
    
    if await db.update_token(token_id, new_emoji, new_name):
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        tokens = await db.get_all_tokens()
        total_pages = math.ceil(len(tokens) / ITEMS_PER_PAGE)
        await message.answer(
            f"üèÜ –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}):",
            reply_markup=AdminKeyboard.get_tokens_keyboard(tokens[:ITEMS_PER_PAGE], 1, total_pages)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
    
    await state.clear() 