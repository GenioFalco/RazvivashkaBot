from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import Database
from keyboards.main_menu import MainMenuKeyboard
from keyboards.puzzles import PuzzlesKeyboard

router = Router()

class PuzzleStates(StatesGroup):
    waiting_for_answer = State()

@router.callback_query(F.data == "puzzles")
async def show_puzzles_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–±—É—Å–æ–≤"""
    db = Database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    has_access = await db.check_feature_access(callback.from_user.id, 'puzzles')
    if not has_access:
        await callback.message.edit_text(
            "‚≠ê –î–æ—Å—Ç—É–ø –∫ —Ä–µ–±—É—Å–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–î–ª—è –º–∞–º¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.",
            reply_markup=MainMenuKeyboard.get_keyboard(callback.from_user.id)
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üß© –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –†–µ–±—É—Å—ã!\n\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–±—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–≤–∏—Ç—å "
        "–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "–ó–∞ –∫–∞–∂–¥—ã–µ 3 —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö —Ä–µ–±—É—Å–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å üß© –ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤!\n"
        "–ê –µ—Å–ª–∏ —Ä–∞–∑–≥–∞–¥–∞–µ—à—å –≤—Å–µ —Ä–µ–±—É—Å—ã –∑–∞ –¥–µ–Ω—å, –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É - üèÜ –ß–µ–º–ø–∏–æ–Ω –¥–Ω—è!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–µ–±—É—Å—ã, –Ω—É–∂–µ–Ω üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–†–µ—à–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=PuzzlesKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "start_puzzles")
async def start_puzzles(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é —Ä–µ–±—É—Å–æ–≤"""
    db = Database()
    puzzles, completed_count = await db.get_user_puzzles(callback.from_user.id)
    
    if completed_count == 9:  # 3 —Ä–µ–±—É—Å–∞ * 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await callback.message.edit_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É–∂–µ —Ä–∞–∑–≥–∞–¥–∞–ª –≤—Å–µ —Ä–µ–±—É—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–µ–±—É—Å–∞–º–∏!",
            reply_markup=PuzzlesKeyboard.get_menu_keyboard()
        )
        await callback.answer()
        await db.cleanup_temp_files()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–±—É—Å
    puzzle = puzzles[0]
    image = FSInputFile(puzzle['image_path'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–±—É—Å–∞–º–∏
    await callback.message.answer_photo(
        photo=image,
        caption=(
            f"–†–µ–±—É—Å {1}/3\n\n"
            "–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã 3 —Ä–µ–±—É—Å–∞.\n"
            "–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π —Ä–µ–±—É—Å —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å!"
        ),
        reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle['id'], puzzle['solved'])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–±—É—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_puzzle=puzzle)
    await callback.answer()

@router.callback_query(F.data.startswith("answer_puzzle_"))
async def start_answer_puzzle(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–±—É—Å"""
    puzzle_id = int(callback.data.split('_')[2])
    rebus_number = int(callback.data.split('_')[3])
    
    data = await state.get_data()
    puzzle = data.get('current_puzzle')
    
    if puzzle['solved'][rebus_number - 1]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "–≠—Ç–æ—Ç —Ä–µ–±—É—Å —É–∂–µ —Ä–∞–∑–≥–∞–¥–∞–Ω! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ä–µ–±—É—Å.",
            reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle_id, puzzle['solved'])
        )
        await callback.answer()
        return
    
    await state.set_state(PuzzleStates.waiting_for_answer)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    puzzle['index'] = data.get('current_index', 0) + 1
    await state.update_data(
        puzzle_id=puzzle_id,
        rebus_number=rebus_number,
        current_puzzle=puzzle
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        f"–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ {rebus_number}-–π —Ä–µ–±—É—Å.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.",
        reply_markup=PuzzlesKeyboard.get_cancel_keyboard(puzzle_id, rebus_number)
    )
    await callback.answer()

@router.message(PuzzleStates.waiting_for_answer)
async def process_puzzle_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–±—É—Å"""
    data = await state.get_data()
    puzzle_id = data['puzzle_id']
    rebus_number = data['rebus_number']
    
    db = Database()
    is_correct = await db.check_puzzle_answer(
        message.from_user.id,
        puzzle_id,
        rebus_number,
        message.text
    )
    
    if is_correct:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±—É—Å–∞—Ö
        puzzles, completed_count = await db.get_user_puzzles(message.from_user.id)
        current_puzzle = next(p for p in puzzles if p['id'] == puzzle_id)
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–µ–±—É—Å–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
        remaining = sum(1 for solved in current_puzzle['solved'] if not solved)
        
        if remaining > 0:
            await message.answer(
                f"–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –û–¥–∏–Ω —Ä–µ–±—É—Å —Ä–∞–∑–≥–∞–¥–∞–Ω, –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {remaining} "
                f"—Ä–µ–±—É—Å–æ–≤ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ. –î–∞–≤–∞–π —Ä–∞–∑–≥–∞–¥–∞–µ–º –∏—Ö –≤—Å–µ!",
                reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle_id, current_puzzle['solved'])
            )
        else:
            # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–±—É—Å—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Ä–∞–∑–≥–∞–¥–∞–Ω—ã
            token = await db.get_token_by_id(3)  # –ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤
            
            if completed_count == 9:  # –í—Å–µ —Ä–µ–±—É—Å—ã –Ω–∞ –¥–µ–Ω—å —Ä–∞–∑–≥–∞–¥–∞–Ω—ã
                super_token = await db.get_token_by_id(8)  # –ß–µ–º–ø–∏–æ–Ω –¥–Ω—è
                await message.answer(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Ä–∞–∑–≥–∞–¥–∞–ª –≤—Å–µ —Ä–µ–±—É—Å—ã!\n"
                    f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {token['emoji']} {token['name']} –∑–∞ —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
                    f"–ò –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É {super_token['emoji']} {super_token['name']}!\n"
                    "–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–µ–±—É—Å–∞–º–∏!",
                    reply_markup=PuzzlesKeyboard.get_menu_keyboard()
                )
                await db.cleanup_temp_files()
            else:
                await message.answer(
                    f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Ä–∞–∑–≥–∞–¥–∞–ª –≤—Å–µ —Ä–µ–±—É—Å—ã –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ!\n"
                    f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {token['emoji']} {token['name']}!\n"
                    "–•–æ—á–µ—à—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–±—É—Å—ã?",
                    reply_markup=PuzzlesKeyboard.get_next_puzzle_keyboard()
                )
    else:
        await message.answer(
            "ü§î –•–º, –ø–æ–¥—É–º–∞–π –µ—â–µ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –¥–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=PuzzlesKeyboard.get_cancel_keyboard(puzzle_id, rebus_number)
        )

@router.callback_query(F.data.startswith("show_answers_"))
async def show_puzzle_answers(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–µ–±—É—Å—ã"""
    puzzle_id = int(callback.data.split('_')[2])
    
    db = Database()
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
    if not await db.spend_token(callback.from_user.id, 1):
        data = await state.get_data()
        puzzle = data.get('current_puzzle')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç üîë –ö–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞!\n"
            "–ü–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏ —É —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
            reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle_id, puzzle['solved'])
        )
        await callback.answer()
        return
    
    data = await state.get_data()
    puzzle = data.get('current_puzzle')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–µ–±—É—Å—ã:\n\n"
        f"1. {puzzle['answers'][0]}\n"
        f"2. {puzzle['answers'][1]}\n"
        f"3. {puzzle['answers'][2]}\n\n"
        "–ó–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Ç—Ä–∞—á–µ–Ω 1 üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞",
        reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle_id, puzzle['solved'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_puzzle_answer_"))
async def cancel_puzzle_answer(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–±—É—Å"""
    puzzle_id = int(callback.data.split('_')[3])
    rebus_number = int(callback.data.split('_')[4])
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    db = Database()
    puzzles, completed_count = await db.get_user_puzzles(callback.from_user.id)
    current_puzzle = next(p for p in puzzles if p['id'] == puzzle_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await state.clear()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–±—É—Å–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    current_puzzle['index'] = next(i for i, p in enumerate(puzzles) if p['id'] == puzzle_id) + 1
    await state.update_data(current_puzzle=current_puzzle)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    image = FSInputFile(current_puzzle['image_path'])
    await callback.message.answer_photo(
        photo=image,
        caption=(
            f"–†–µ–±—É—Å {current_puzzle['index']}/3\n\n"
            "–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã 3 —Ä–µ–±—É—Å–∞.\n"
            "–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π —Ä–µ–±—É—Å —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å!"
        ),
        reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle_id, current_puzzle['solved'])
    )
    await callback.answer()

@router.callback_query(F.data == "next_puzzle")
async def show_next_puzzle(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–±—É—Å"""
    db = Database()
    puzzles, completed_count = await db.get_user_puzzles(callback.from_user.id)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–±—É—Å
    data = await state.get_data()
    current_puzzle = data.get('current_puzzle')
    current_index = next(i for i, p in enumerate(puzzles) if p['id'] == current_puzzle['id'])
    next_index = current_index + 1
    
    if next_index >= len(puzzles):
        await callback.message.answer(
            "–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ä–µ–±—É—Å–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–µ–±—É—Å–∞–º–∏!",
            reply_markup=PuzzlesKeyboard.get_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–±—É—Å
    puzzle = puzzles[next_index]
    puzzle['index'] = next_index + 1  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
    image = FSInputFile(puzzle['image_path'])
    
    await callback.message.answer_photo(
        photo=image,
        caption=(
            f"–†–µ–±—É—Å {next_index + 1}/3\n\n"
            "–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã 3 —Ä–µ–±—É—Å–∞.\n"
            "–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π —Ä–µ–±—É—Å —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å!"
        ),
        reply_markup=PuzzlesKeyboard.get_puzzle_keyboard(puzzle['id'], puzzle['solved'])
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–±—É—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_puzzle=puzzle, current_index=next_index)
    await callback.answer()

@router.callback_query(F.data == "back_to_puzzles_menu")
async def back_to_puzzles_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —Ä–µ–±—É—Å–æ–≤"""
    db = Database()
    await state.clear()
    await db.cleanup_temp_files()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "üß© –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –†–µ–±—É—Å—ã!\n\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–±—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–≤–∏—Ç—å "
        "–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "–ó–∞ –∫–∞–∂–¥—ã–µ 3 —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö —Ä–µ–±—É—Å–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å üß© –ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤!\n"
        "–ê –µ—Å–ª–∏ —Ä–∞–∑–≥–∞–¥–∞–µ—à—å –≤—Å–µ —Ä–µ–±—É—Å—ã –∑–∞ –¥–µ–Ω—å, –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É - üèÜ –ß–µ–º–ø–∏–æ–Ω –¥–Ω—è!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–µ–±—É—Å—ã, –Ω—É–∂–µ–Ω üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–†–µ—à–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=PuzzlesKeyboard.get_menu_keyboard()
    )
    await callback.answer() 