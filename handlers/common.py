from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.main_menu import MainMenuKeyboard
from keyboards.achievements import AchievementsKeyboard
from database.database import Database
from config import config
import re

router = Router()

class TokenEditStates(StatesGroup):
    waiting_for_emoji = State()
    waiting_for_name = State()

def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users"))
    kb.add(InlineKeyboardButton(text="üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Ç–æ–Ω–∞–º–∏", callback_data="manage_tokens"))
    kb.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    kb.adjust(1)
    return kb.as_markup()

async def get_tokens_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∂–µ—Ç–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    kb = InlineKeyboardBuilder()
    db = Database()
    tokens = await db.get_all_tokens()
    
    for token in tokens:
        kb.add(InlineKeyboardButton(
            text=f"{token['emoji']} {token['name']}", 
            callback_data=f"edit_token_{token['id']}"
        ))
    
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin"))
    kb.adjust(1)
    return kb.as_markup()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    db = Database()
    await db.create_tables()
    
    await db.add_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞–∑–≤–∏–≤–∞—à–∫–∞! üåü\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é:",
        reply_markup=MainMenuKeyboard.get_keyboard(user_id=message.from_user.id)
    )

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id in config.ADMIN_IDS:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id in config.ADMIN_IDS:
        db = Database()
        users = await db.get_all_users()
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += f"ID: {user['telegram_id']}\n"
            response += f"–ò–º—è: {user['full_name']}\n"
            response += f"Username: {user['username']}\n"
            response += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date']}\n"
            response += "-" * 20 + "\n"
        await callback.message.edit_text(
            response,
            reply_markup=get_admin_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "manage_tokens")
async def manage_tokens_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ—Ç–æ–Ω–∞–º–∏"""
    if callback.from_user.id in config.ADMIN_IDS:
        db = Database()
        tokens = await db.get_all_tokens()
        response = "–°–ø–∏—Å–æ–∫ –∂–µ—Ç–æ–Ω–æ–≤:\n\n"
        for token in tokens:
            response += f"{token['emoji']} {token['name']}\n"
        
        response += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–µ—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        
        await callback.message.edit_text(
            response,
            reply_markup=await get_tokens_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_token_"))
async def start_token_edit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ—Ç–æ–Ω–∞"""
    token_id = int(callback.data.split('_')[2])
    db = Database()
    token = await db.get_token_by_id(token_id)
    await state.update_data(token_id=token_id, old_emoji=token['emoji'], old_name=token['name'])
    await state.set_state(TokenEditStates.waiting_for_emoji)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π –∂–µ—Ç–æ–Ω: {token['emoji']} {token['name']}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–µ—Ç–æ–Ω–∞.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ‚≠ê üåü üéØ üé® üé≠\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardBuilder().add(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
        ).as_markup()
    )
    await callback.answer()

@router.message(TokenEditStates.waiting_for_emoji)
async def process_token_emoji(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–µ—Ç–æ–Ω–∞"""
    if not re.match(r'^[\U0001F300-\U0001F9FF\u2600-\u26FF\u2700-\u27BF]$', message.text):
        await message.answer(
            "–≠—Ç–æ –Ω–µ —ç–º–æ–¥–∑–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: ‚≠ê üåü üéØ üé® üé≠\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
            ).as_markup()
        )
        return

    data = await state.get_data()
    await state.update_data(new_emoji=message.text)
    await state.set_state(TokenEditStates.waiting_for_name)
    
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π –∂–µ—Ç–æ–Ω: {data['old_emoji']} {data['old_name']}\n"
        f"–ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏: {message.text}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∂–µ—Ç–æ–Ω–∞.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: –ó–≤–µ–∑–¥–æ—á–∫–∞, –°–æ–ª–Ω—ã—à–∫–æ, –†–∞–¥—É–≥–∞\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardBuilder().add(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
        ).as_markup()
    )

@router.message(TokenEditStates.waiting_for_name)
async def process_token_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∂–µ—Ç–æ–Ω–∞"""
    if not re.match(r'^[–∞-—è–ê-–Øa-zA-Z\s]+$', message.text):
        data = await state.get_data()
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è!\n\n"
            f"–¢–µ–∫—É—â–∏–π –∂–µ—Ç–æ–Ω: {data['old_emoji']} {data['old_name']}\n"
            f"–ù–æ–≤—ã–π —ç–º–æ–¥–∑–∏: {data['new_emoji']}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ó–≤–µ–∑–¥–æ—á–∫–∞, –°–æ–ª–Ω—ã—à–∫–æ, –†–∞–¥—É–≥–∞\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
            ).as_markup()
        )
        return

    data = await state.get_data()
    db = Database()
    
    success = await db.update_token(
        token_id=data['token_id'],
        new_emoji=data['new_emoji'],
        new_name=message.text
    )
    
    if success:
        await message.answer(
            "‚úÖ –ñ–µ—Ç–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–ë—ã–ª–æ: {data['old_emoji']} {data['old_name']}\n"
            f"–°—Ç–∞–ª–æ: {data['new_emoji']} {message.text}",
            reply_markup=await get_tokens_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞.",
            reply_markup=await get_tokens_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data == "cancel_edit")
async def cancel_token_edit(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–µ—Ç–æ–Ω–∞"""
    await state.clear()
    await callback.message.edit_text(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await get_tokens_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.in_({
    "creativity",
    "articular_gym", "neuro_gym",
    "for_moms"
}))
async def process_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    responses = {
        "creativity": "üé® –†–∞–∑–¥–µ–ª –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "articular_gym": "ü§∏‚Äç‚ôÇÔ∏è –†–∞–∑–¥–µ–ª –ê—Ä—Ç–∏–∫—É–ª—è—Ä–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "neuro_gym": "üß† –†–∞–∑–¥–µ–ª –ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "for_moms": "üë©‚Äçüë¶ –†–∞–∑–¥–µ–ª –î–ª—è –º–∞–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    }
    await callback.message.edit_text(
        responses[callback.data],
        reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª:",
        reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
    )
    await callback.answer() 