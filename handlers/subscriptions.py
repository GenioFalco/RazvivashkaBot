from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.database import Database
from keyboards.subscriptions import SubscriptionsKeyboard
from keyboards.main_menu import MainMenuKeyboard
from datetime import datetime

router = Router()

@router.callback_query(F.data == "for_parents")
async def show_subscriptions_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=SubscriptionsKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "subscription_info")
async def show_subscription_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.message.edit_text(
        "‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
        "üî∏ –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å)\n"
        "‚Ä¢ –û–¥–∏–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –†–∏—Å–æ–≤–∞–Ω–∏–µ\n\n"
        "üî∏ –° –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ –í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –í—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n"
        "‚Ä¢ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! üåü",
        reply_markup=SubscriptionsKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "show_subscriptions")
async def show_subscription_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    db = Database()
    subscriptions = await db.get_all_subscriptions()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    current_sub = await db.get_user_subscription(callback.from_user.id)
    
    text = "üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    if current_sub:
        text += (
            "‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n"
            f"'{current_sub['name']}' –¥–æ {current_sub['end_date']}\n\n"
        )
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=SubscriptionsKeyboard.get_subscription_list_keyboard(subscriptions)
    )
    await callback.answer()

@router.callback_query(F.data == "buy_subscription")
async def show_subscription_plans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    db = Database()
    subscriptions = await db.get_all_subscriptions()
    
    text = (
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n"
    )
    
    builder = InlineKeyboardBuilder()
    
    for sub in subscriptions:
        text += (
            f"üî∏ {sub['name']}\n"
            f"{sub['description']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {sub['price']}‚ÇΩ\n\n"
        )
        builder.button(
            text=f"{sub['name']} - {sub['price']}‚ÇΩ",
            callback_data=f"activate_subscription_{sub['id']}"
        )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscription")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("activate_subscription_"))
async def activate_subscription(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ"""
    subscription_id = int(callback.data.split("_")[2])
    db = Database()
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if await db.add_subscription(callback.from_user.id, subscription_id):
        subscription = await db.get_user_subscription(callback.from_user.id)
        text = (
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            f"–¢–∞—Ä–∏—Ñ: {subscription['name']}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['end_date']}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "‚Ä¢ –í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –í—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
            "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üåü"
        )
    else:
        text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=MainMenuKeyboard.get_keyboard(callback.from_user.id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"""
    subscription_id = int(callback.data.split("_")[2])
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    payment_successful = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    
    if payment_successful:
        db = Database()
        if await db.add_subscription(callback.from_user.id, subscription_id):
            await callback.message.edit_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üåü",
                reply_markup=MainMenuKeyboard.get_keyboard(callback.from_user.id)
            )
        else:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=SubscriptionsKeyboard.get_menu_keyboard()
            )
    else:
        await callback.answer(
            "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            show_alert=True
        )

@router.callback_query(F.data == "back_to_subscriptions")
async def back_to_subscriptions(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await show_subscriptions_menu(callback)

@router.callback_query(F.data == "subscription")
async def show_subscription_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    db = Database()
    subscription = await db.get_user_subscription(callback.from_user.id)
    
    if subscription:
        end_date = datetime.strptime(subscription['end_date'], '%Y-%m-%d')
        days_left = (end_date - datetime.now()).days
        
        text = (
            "üí´ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n\n"
            f"–¢–∞—Ä–∏—Ñ: {subscription['name']}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"
        )
    else:
        text = (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "‚Ä¢ –í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –í—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É?"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=SubscriptionsKeyboard.get_subscription_keyboard(bool(subscription))
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=MainMenuKeyboard.get_keyboard(callback.from_user.id)
    )
    await callback.answer() 