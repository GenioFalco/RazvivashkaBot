from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database.database import Database
from keyboards.tongue_twisters import TongueTwistersKeyboard
from keyboards.main_menu import MainMenuKeyboard

router = Router()

MOTIVATIONAL_MESSAGES = [
    "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –£ —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üåü",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–µ–ª–∞–µ—Ç –º–∞—Å—Ç–µ—Ä–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è! üí™",
    "–î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ —É–∂–µ —É—Å–ø–µ—Ö! –ú–æ–ª–æ–¥–µ—Ü! üåà",
    "–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! ‚≠ê",
    "–° –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–µ! üéØ"
]

@router.callback_query(F.data == "tongue_twisters")
async def show_tongue_twisters_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫"""
    await callback.message.edit_text(
        "üëÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏!\n\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç:\n"
        "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –¥–∏–∫—Ü–∏—é\n"
        "‚Ä¢ –†–∞–∑–≤–∏—Ç—å —Ä–µ—á—å\n"
        "‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç–∫–æ –∏ –∫—Ä–∞—Å–∏–≤–æ\n\n"
        "–ó–∞ –∫–∞–∂–¥—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É —Ç—ã –ø–æ–ª—É—á–∏—à—å üëÑ –ì–æ–≤–æ—Ä—É–Ω!\n"
        "–ê –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ 3 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –∑–∞ –¥–µ–Ω—å, –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É - üèÜ –ß–µ–º–ø–∏–æ–Ω –¥–Ω—è!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!",
        reply_markup=TongueTwistersKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "start_tongue_twisters")
async def start_tongue_twisters(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫"""
    db = Database()
    twisters, completed_count = await db.get_user_tongue_twisters(callback.from_user.id)
    
    if completed_count == 3:
        await callback.message.edit_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ—á–∏!",
            reply_markup=TongueTwistersKeyboard.get_back_button()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(twisters=twisters, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É
    twister = twisters[0]
    await callback.message.edit_text(
        f"–°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ {1}/3:\n\n"
        f"{twister['text']}\n\n"
        f"{'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞!' if twister['completed'] else '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}",
        reply_markup=TongueTwistersKeyboard.get_navigation_keyboard(0, len(twisters), twister['id'], twister['completed'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith(("next_", "prev_")))
async def navigate_twisters(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞–º"""
    action, current_index = callback.data.split('_')
    current_index = int(current_index)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    twisters = data.get('twisters', [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    new_index = current_index + 1 if action == "next" else current_index - 1
    if not 0 <= new_index < len(twisters):
        await callback.answer("–ù–µ—Ç –±–æ–ª—å—à–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_index=new_index)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É
    twister = twisters[new_index]
    await callback.message.edit_text(
        f"–°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ {new_index + 1}/3:\n\n"
        f"{twister['text']}\n\n"
        f"{'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞!' if twister['completed'] else '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}",
        reply_markup=TongueTwistersKeyboard.get_navigation_keyboard(new_index, len(twisters), twister['id'], twister['completed'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("complete_twister_"))
async def complete_twister(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    twister_id = int(callback.data.split("_")[2])
    db = Database()
    
    # –û—Ç–º–µ—á–∞–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    success = await db.complete_tongue_twister(callback.from_user.id, twister_id)
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫
        twisters, completed_count = await db.get_user_tongue_twisters(callback.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        data = await state.get_data()
        current_index = data.get('current_index', 0)
        await state.update_data(twisters=twisters)
        
        if completed_count == 3:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä-–ø—Ä–∏–∑ (—Ç–æ–∫–µ–Ω —Å id=8)
            super_token = await db.get_token_by_id(8)
            text = (
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
                f"–í –Ω–∞–≥—Ä–∞–¥—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Å–æ–±—ã–π –ø—Ä–∏–∑: {super_token['emoji']} {super_token['name']}!\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏! üåü"
            )
            markup = TongueTwistersKeyboard.get_back_button()
        else:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–æ–∫–µ–Ω
            token = await db.get_token_by_id(4)  # id=4 –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ì–æ–≤–æ—Ä—É–Ω"
            text = (
                "üéØ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–æ–π!\n"
                f"–ü–æ–ª—É—á–∞–µ—à—å –Ω–∞–≥—Ä–∞–¥—É: {token['emoji']} {token['name']}!\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n\n"
                f"–°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ {current_index + 1}/3:\n"
                f"{twisters[current_index]['text']}"
            )
            markup = TongueTwistersKeyboard.get_navigation_keyboard(
                current_index,
                len(twisters),
                twisters[current_index]['id'],
                True  # –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            )
    else:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        markup = TongueTwistersKeyboard.get_back_button()
    
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data.startswith("skip_twister_"))
async def skip_twister(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É"""
    import random
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = random.choice(MOTIVATIONAL_MESSAGES)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    twisters = data.get('twisters', [])
    current_index = data.get('current_index', 0)
    current_twister = twisters[current_index]
    
    await callback.message.edit_text(
        f"{message}\n\n"
        f"–°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ {current_index + 1}/3:\n"
        f"{current_twister['text']}",
        reply_markup=TongueTwistersKeyboard.get_navigation_keyboard(
            current_index,
            len(twisters),
            current_twister['id'],
            current_twister['completed']
        )
    )
    await callback.answer()

@router.callback_query(F.data.in_({"back_to_tongue_twisters", "back_to_main"}))
async def process_back_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" """
    await state.clear()
    
    if callback.data == "back_to_main":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
        )
    else:
        await callback.message.edit_text(
            "üëÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏!\n\n"
            "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç:\n"
            "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –¥–∏–∫—Ü–∏—é\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç—å —Ä–µ—á—å\n"
            "‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç–∫–æ –∏ –∫—Ä–∞—Å–∏–≤–æ\n\n"
            "–ó–∞ –∫–∞–∂–¥—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É —Ç—ã –ø–æ–ª—É—á–∏—à—å üëÑ –ì–æ–≤–æ—Ä—É–Ω!\n"
            "–ê –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ 3 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –∑–∞ –¥–µ–Ω—å, –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É - üèÜ –ß–µ–º–ø–∏–æ–Ω –¥–Ω—è!\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!",
            reply_markup=TongueTwistersKeyboard.get_menu_keyboard()
        )
    await callback.answer() 