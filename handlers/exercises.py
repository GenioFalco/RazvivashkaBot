from aiogram import Router, F, types
from aiogram.types import CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.fsm.context import FSMContext
from database.database import Database
from keyboards.exercises import ExercisesKeyboard
import aiohttp
from io import BytesIO
import re
from urllib.parse import urlencode
import aiosqlite
from datetime import datetime
from keyboards.main_menu import MainMenuKeyboard

router = Router()

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
EXERCISE_DESCRIPTIONS = {
    'neuro': {
        'title': 'üß† –ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞',
        'description': (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ù–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞!\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ:\n"
            "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø–∞–º—è—Ç—å\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ\n"
            "‚Ä¢ –°—Ç–∞—Ç—å –±–æ–ª–µ–µ —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üß† –£–º–Ω–∏–∫!\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±—è –∂–¥–µ—Ç –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–º–∏ '–°–º–æ—Ç—Ä–µ—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
        ),
        'success_message': "–ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å —Å–≤–æ–π —É–º, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —É—á–µ–Ω—ã–π! üß† –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —Ç–≤–æ–π –º–æ–∑–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!",
        'partial_message': "–•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —à–∞–≥ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–π —É–º. –ü—Ä–æ–¥–æ–ª–∂–∞–π!",
        'not_done_message': "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!"
    },
    'articular': {
        'title': 'ü§∏ –ê—Ä—Ç–∏–∫—É–ª—è—Ä–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞',
        'description': (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ê—Ä—Ç–∏–∫—É–ª—è—Ä–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞!\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ:\n"
            "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç—å —Ä–µ—á–µ–≤–æ–π –∞–ø–ø–∞—Ä–∞—Ç\n"
            "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç–∫–æ –∏ –∫—Ä–∞—Å–∏–≤–æ\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å ü§∏ –ì–∏–º–Ω–∞—Å—Ç!\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±—è –∂–¥–µ—Ç –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–º–∏ '–°–º–æ—Ç—Ä–µ—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
        ),
        'success_message': "–¢—ã —Å—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞! –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è —Ä–µ—á—å –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–∏–∫—Ç–æ—Ä–∞! üé§",
        'partial_message': "–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–≤–æ–µ–π –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏!",
        'not_done_message': "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –ó–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Ä–µ—á—å –µ—â–µ –ª—É—á—à–µ!"
    }
}

async def get_direct_download_link(url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å Google Drive"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏–∑ URL
    file_id = url.split('/d/')[1].split('/')[0]
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    direct_link = f"https://drive.google.com/uc?export=download&id={file_id}"
    print(f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {direct_link}")
    return direct_link

async def send_video(bot, chat_id, video_url, caption, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Å—Å—ã–ª–∫–µ
        await bot.send_video(
            chat_id=chat_id,
            video=video_url,
            caption=caption,
            reply_markup=reply_markup,
            supports_streaming=True
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        try:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                async with session.get(video_url) as response:
                    if response.status == 200:
                        video_data = await response.read()
                        video_file = BufferedInputFile(
                            video_data,
                            filename="exercise.mp4"
                        )
                        await bot.send_video(
                            chat_id=chat_id,
                            video=video_file,
                            caption=caption,
                            reply_markup=reply_markup,
                            supports_streaming=True
                        )
                        return True
        except Exception as e2:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e2}")
        return False

@router.callback_query(F.data.in_(["neuro_exercises", "articular_exercises"]))
async def show_exercise_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    exercise_type = 'neuro' if callback.data == "neuro_exercises" else 'articular'
    
    db = Database()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    has_access = await db.check_feature_access(callback.from_user.id, exercise_type + '_exercises')
    if not has_access:
        await callback.message.edit_text(
            "‚≠ê –î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–î–ª—è –º–∞–º¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.",
            reply_markup=MainMenuKeyboard.get_keyboard(callback.from_user.id)
        )
        await callback.answer()
        return
    
    info = EXERCISE_DESCRIPTIONS[exercise_type]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(exercise_type=exercise_type)
    
    await callback.message.edit_text(
        f"{info['title']}\n\n{info['description']}",
        reply_markup=ExercisesKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "watch_exercise")
async def show_exercise_video(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–º–æ—Ç—Ä–µ—Ç—å'")
    
    state_data = await state.get_data()
    exercise_type = state_data.get('exercise_type')
    print(f"–¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {exercise_type}")
    
    if not exercise_type:
        print("–û—à–∏–±–∫–∞: —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return

    db = Database()
    video = await db.get_next_exercise_video(callback.from_user.id, exercise_type)
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –ë–î: {video}")
    
    if not video:
        print("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
        return

    try:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ URL: {video['video_url']}")
        direct_link = await get_direct_download_link(video['video_url'])
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_link}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –≤–∏–¥–µ–æ
        caption = f"üé• {video['title']}\n\n{video['description']}"
        if video.get('already_viewed'):
            caption += "\n\n‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!"
        else:
            caption += "\n\n–û—Ç–º–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        success = await send_video(
            bot=callback.message.bot,
            chat_id=callback.message.chat.id,
            video_url=direct_link,
            caption=caption,
            reply_markup=ExercisesKeyboard.get_exercise_keyboard(
                video['id'],
                show_completion=not video.get('already_viewed')
            )
        )
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(current_video_id=video['id'])
        else:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@router.callback_query(F.data.startswith(("prev_video_", "next_video_")))
async def navigate_videos(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –≤–∏–¥–µ–æ"""
    try:
        action = callback.data.split('_')[0]  # prev –∏–ª–∏ next
        current_video_id = int(callback.data.split('_')[2])
        
        state_data = await state.get_data()
        exercise_type = state_data.get('exercise_type')
        
        if not exercise_type:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
            return
        
        db = Database()
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ
        video = await db.get_next_exercise_video(callback.from_user.id, exercise_type)
        
        if not video:
            await callback.answer("–ë–æ–ª—å—à–µ –≤–∏–¥–µ–æ –Ω–µ—Ç")
            return
            
        direct_link = await get_direct_download_link(video['video_url'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –≤–∏–¥–µ–æ
        caption = f"üé• {video['title']}\n\n{video['description']}"
        if video.get('already_viewed'):
            caption += "\n\n‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!"
        else:
            caption += "\n\n–û—Ç–º–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        success = await send_video(
            bot=callback.message.bot,
            chat_id=callback.message.chat.id,
            video_url=direct_link,
            caption=caption,
            reply_markup=ExercisesKeyboard.get_exercise_keyboard(
                video['id'],
                show_completion=not video.get('already_viewed')
            )
        )
        
        if success:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(current_video_id=video['id'])
        else:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")

@router.callback_query(F.data.startswith(("exercise_full_", "exercise_partial_", "exercise_not_done_")))
async def process_exercise_completion(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
        data = callback.data
        if '_not_done_' in data:
            status = 'not_done'
            video_id = int(data.split('_not_done_')[1])
        else:
            parts = data.split('_')
            status = parts[1]  # full –∏–ª–∏ partial
            video_id = int(parts[2])
        
        db = Database()
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        video = await db.get_exercise_video(video_id)
        if not video:
            await callback.answer("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        exercise_type = video['type']
        info = EXERCISE_DESCRIPTIONS[exercise_type]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∂–µ—Ç–æ–Ω—ã –∑–∞ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute("""
                SELECT COUNT(*) FROM user_exercise_views
                WHERE user_id = ? AND video_id = ?
                AND date(date) = date(?)
                AND (status = 'full' OR status = 'partial')
            """, (callback.from_user.id, video_id, today))
            count = (await cursor.fetchone())[0]
            
            if count > 0 and status in ['full', 'partial']:
                await callback.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∂–µ—Ç–æ–Ω—ã –∑–∞ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!")
                return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        await db.record_exercise_view(callback.from_user.id, video_id, status)
        
        if status in ['full', 'partial']:  # –ù–∞—á–∏—Å–ª—è–µ–º –∂–µ—Ç–æ–Ω—ã –∏ –∑–∞ –ø–æ–ª–Ω–æ–µ, –∏ –∑–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_id = 5 if exercise_type == 'neuro' else 6
            token = await db.get_token_by_id(token_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.update_achievement(callback.from_user.id, token_id)
            
            message = info['success_message'] if status == 'full' else info['partial_message']
            await callback.message.answer(
                f"{message}\n"
                f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {token['emoji']} {token['name']}!\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º.",
                reply_markup=ExercisesKeyboard.get_menu_keyboard()
            )
        else:  # status == 'not_done'
            await callback.message.answer(
                f"{info['not_done_message']}\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º.",
                reply_markup=ExercisesKeyboard.get_menu_keyboard()
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ—Ç–∫–∏: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ExercisesKeyboard.get_menu_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "back_to_exercise_menu")
async def back_to_exercise_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        exercise_type = data.get('exercise_type')
        
        if exercise_type:
            info = EXERCISE_DESCRIPTIONS[exercise_type]
            await callback.message.edit_text(
                f"{info['title']}\n\n{info['description']}",
                reply_markup=ExercisesKeyboard.get_menu_keyboard()
            )
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from keyboards.main_menu import MainMenuKeyboard
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        data = await state.get_data()
        exercise_type = data.get('exercise_type')
        
        if exercise_type:
            info = EXERCISE_DESCRIPTIONS[exercise_type]
            await callback.message.answer(
                f"{info['title']}\n\n{info['description']}",
                reply_markup=ExercisesKeyboard.get_menu_keyboard()
            )
        else:
            from keyboards.main_menu import MainMenuKeyboard
            await callback.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
            )
    await callback.answer() 