from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import Database
from keyboards.main_menu import MainMenuKeyboard
from keyboards.riddles import RiddlesKeyboard

router = Router()

class RiddleStates(StatesGroup):
    waiting_for_answer = State()

@router.callback_query(F.data == "riddles")
async def show_riddles_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∑–∞–≥–∞–¥–æ–∫"""
    await callback.message.edit_text(
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ó–∞–≥–∞–¥–∫–∏!\n\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–≥–∞–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–≤–∏—Ç—å "
        "–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "–ó–∞ –∫–∞–∂–¥—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—É—é –∑–∞–≥–∞–¥–∫—É —Ç—ã –ø–æ–ª—É—á–∏—à—å ‚ùì –ú—É–¥—Ä–µ—Ü!\n"
        "–ê –µ—Å–ª–∏ —Ä–∞–∑–≥–∞–¥–∞–µ—à—å –≤—Å–µ 5 –∑–∞–≥–∞–¥–æ–∫, –ø–æ–ª—É—á–∏—à—å –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É - üèÜ –ß–µ–º–ø–∏–æ–Ω –¥–Ω—è!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É, –Ω—É–∂–µ–Ω üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–≥–∞–¥–∫–∏', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=RiddlesKeyboard.get_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "start_riddles")
async def start_riddles(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –∑–∞–≥–∞–¥–æ–∫"""
    db = Database()
    riddles, completed_count = await db.get_user_riddles(callback.from_user.id)
    
    if completed_count == 5:
        await callback.message.edit_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É–∂–µ —Ä–∞–∑–≥–∞–¥–∞–ª –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–≥–∞–¥–∫–∞–º–∏!",
            reply_markup=RiddlesKeyboard.get_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–∞–¥–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(riddles=riddles, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–≥–∞–¥–∫—É
    riddle = riddles[0]
    await callback.message.edit_text(
        f"–ó–∞–≥–∞–¥–∫–∞ {1}/5:\n\n"
        f"{riddle['question']}\n\n"
        f"{'‚úÖ –†–∞–∑–≥–∞–¥–∞–Ω–∞!' if riddle['completed'] else '‚ùå –ù–µ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞'}",
        reply_markup=RiddlesKeyboard.get_navigation_keyboard(0, len(riddles))
    )
    await callback.answer()

@router.callback_query(F.data.startswith(("next_riddle_", "prev_riddle_")))
async def navigate_riddles(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–≥–∞–¥–∫–∞–º"""
    data = await state.get_data()
    riddles = data['riddles']
    current_index = int(callback.data.split('_')[2])
    
    if callback.data.startswith("next_"):
        new_index = current_index + 1
    else:
        new_index = current_index - 1
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    await state.set_data({**data, 'current_index': new_index})
    
    riddle = riddles[new_index]
    await callback.message.edit_text(
        f"–ó–∞–≥–∞–¥–∫–∞ {new_index + 1}/5:\n\n"
        f"{riddle['question']}\n\n"
        f"{'‚úÖ –†–∞–∑–≥–∞–¥–∞–Ω–∞!' if riddle['completed'] else '‚ùå –ù–µ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞'}",
        reply_markup=RiddlesKeyboard.get_navigation_keyboard(new_index, len(riddles))
    )
    await callback.answer()

@router.callback_query(F.data.startswith("answer_riddle_"))
async def start_answer_riddle(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É"""
    current_index = int(callback.data.split('_')[2])
    data = await state.get_data()
    riddle = data['riddles'][current_index]
    
    if riddle['completed']:
        await callback.message.edit_text(
            "–≠—Ç–∞ –∑–∞–≥–∞–¥–∫–∞ —É–∂–µ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π.",
            reply_markup=RiddlesKeyboard.get_navigation_keyboard(current_index, len(data['riddles']))
        )
        await callback.answer()
        return
    
    await state.set_state(RiddleStates.waiting_for_answer)
    await callback.message.edit_text(
        f"–ó–∞–≥–∞–¥–∫–∞:\n{riddle['question']}\n\n"
        "–í–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.",
        reply_markup=RiddlesKeyboard.get_cancel_keyboard(current_index)
    )
    await callback.answer()

@router.message(RiddleStates.waiting_for_answer)
async def process_riddle_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É"""
    data = await state.get_data()
    current_index = data['current_index']
    riddle = data['riddles'][current_index]
    
    db = Database()
    is_correct = await db.check_riddle_answer(
        message.from_user.id,
        riddle['id'],
        message.text
    )
    
    if is_correct:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥–∞–¥–∫–∞—Ö
        updated_riddles, completed_count = await db.get_user_riddles(message.from_user.id)
        await state.update_data(riddles=updated_riddles)
        
        if completed_count == 5:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
            super_token = await db.get_token_by_id(8)
            riddle_token = await db.get_token_by_id(7)
            
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Ä–∞–∑–≥–∞–¥–∞–ª –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏!\n"
                f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {riddle_token['emoji']} {riddle_token['name']} –∑–∞ —ç—Ç—É –∑–∞–≥–∞–¥–∫—É\n"
                f"–ò –æ—Å–æ–±—É—é –Ω–∞–≥—Ä–∞–¥—É {super_token['emoji']} {super_token['name']}!\n"
                "–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–≥–∞–¥–∫–∞–º–∏!",
                reply_markup=RiddlesKeyboard.get_menu_keyboard()
            )
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            riddle_token = await db.get_token_by_id(7)
            await message.answer(
                f"‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {riddle_token['emoji']} {riddle_token['name']}!\n"
                f"–ó–∞–≥–∞–¥–∫–∞ {current_index + 1}/5 —Ä–∞–∑–≥–∞–¥–∞–Ω–∞!",
                reply_markup=RiddlesKeyboard.get_navigation_keyboard(current_index, len(updated_riddles))
            )
    else:
        await message.answer(
            "ü§î –•–º, –ø–æ–¥—É–º–∞–π –µ—â—ë!\n"
            "–ü–æ–ø—Ä–æ–±—É–π –¥–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=RiddlesKeyboard.get_cancel_keyboard(current_index)
        )

@router.callback_query(F.data.startswith("show_answer_"))
async def show_riddle_answer(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É"""
    db = Database()
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
    if not await db.spend_token(callback.from_user.id, 1):
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç üîë –ö–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞!\n"
            "–ü–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏ —É —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
            reply_markup=RiddlesKeyboard.get_navigation_keyboard(
                int(callback.data.split('_')[2]),
                5
            )
        )
        await callback.answer()
        return
    
    data = await state.get_data()
    current_index = int(callback.data.split('_')[2])
    riddle = data['riddles'][current_index]
    
    await callback.message.edit_text(
        f"–ó–∞–≥–∞–¥–∫–∞ {current_index + 1}/5:\n\n"
        f"{riddle['question']}\n\n"
        f"–û—Ç–≤–µ—Ç: {riddle['answer']}\n\n"
        "–ó–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω 1 üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞",
        reply_markup=RiddlesKeyboard.get_navigation_keyboard(current_index, len(data['riddles']))
    )
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_answer_"))
async def cancel_riddle_answer(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É"""
    current_index = int(callback.data.split('_')[2])
    data = await state.get_data()
    riddle = data['riddles'][current_index]
    
    await state.set_data(data)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    
    await callback.message.edit_text(
        f"–ó–∞–≥–∞–¥–∫–∞ {current_index + 1}/5:\n\n"
        f"{riddle['question']}\n\n"
        f"{'‚úÖ –†–∞–∑–≥–∞–¥–∞–Ω–∞!' if riddle['completed'] else '‚ùå –ù–µ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞'}",
        reply_markup=RiddlesKeyboard.get_navigation_keyboard(current_index, len(data['riddles']))
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_riddles_menu")
async def back_to_riddles_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –∑–∞–≥–∞–¥–æ–∫"""
    await state.clear()
    await show_riddles_menu(callback) 