from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.achievements import AchievementsKeyboard
from keyboards.main_menu import MainMenuKeyboard
from database.database import Database
from config import config

router = Router()

class TokenEditStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    waiting_for_emoji = State()
    waiting_for_name = State()

@router.callback_query(F.data == "achievements")
async def show_achievements_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª—à–µ–±–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! ‚ú®\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å–µ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å—Ç–∞—Ä–∞–Ω–∏—è –∏ —É—Å–ø–µ—Ö–∏.",
        reply_markup=AchievementsKeyboard.get_main_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "photo_album")
async def show_photo_album(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º"""
    await callback.message.edit_text(
        "üì∏ –¢–≤–æ–π –≤–æ–ª—à–µ–±–Ω—ã–π —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ç–≤–æ–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∏—Å—É–Ω–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ¬ª!",
        reply_markup=AchievementsKeyboard.get_back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "achievements_rating")
async def show_achievements_rating(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await callback.message.edit_text(
        "üìä –†–µ–π—Ç–∏–Ω–≥ –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤\n\n"
        "üöß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —Å—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤!",
        reply_markup=AchievementsKeyboard.get_back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "achievements_list")
async def show_achievements_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    db = Database()
    tokens = await db.get_all_tokens()
    user_achievements = await db.get_user_achievements(callback.from_user.id)
    
    text = (
        "üåà –¢–≤–æ—è –≤–æ–ª—à–µ–±–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞–≥—Ä–∞–¥! üåà\n\n"
        "–ü—Ä–∏–≤–µ—Ç, —é–Ω—ã–π –≤–æ–ª—à–µ–±–Ω–∏–∫! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ —á—É–¥–µ—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã "
        "—Ç—ã —É–∂–µ —Å–æ–±—Ä–∞–ª –∑–∞ —Å–≤–æ–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è.\n\n"
    )
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ": ["–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞", "–ó–≤–µ–∑–¥–∞ –¥–Ω—è", "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è"],
        "–†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏": ["–ì–æ–≤–æ—Ä—É–Ω", "–ú—É–¥—Ä–µ—Ü"],
        "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞": ["–ì–∏–º–Ω–∞—Å—Ç", "–£–º–Ω–∏–∫"],
        "–õ–æ–≥–∏–∫–∞": ["–ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤"]
    }
    
    for category, token_names in categories.items():
        category_tokens = [t for t in tokens if t['name'] in token_names]
        if category_tokens:
            text += f"\nüéØ {category}:\n"
            for token in category_tokens:
                count = user_achievements.get(token['id'], 0)
                stars = "‚≠ê" * min(count, 5) if count > 0 else "‚ùå"
                text += (
                    f"{token['emoji']} {token['name']}\n"
                    f"‚îî –°–æ–±—Ä–∞–Ω–æ: {count} —à—Ç. {stars}\n"
                    f"‚îî {token['description']}\n\n"
                )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
    total_achievements = sum(user_achievements.values())
    if total_achievements == 0:
        text += "\nüåü –ù–∞—á–Ω–∏ —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—ã!"
    elif total_achievements < 5:
        text += "\nüåü –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif total_achievements < 10:
        text += "\nüåü –¢—ã —É–∂–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    else:
        text += "\nüåü –í–∞—É! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!"
    
    await callback.message.edit_text(
        text,
        reply_markup=AchievementsKeyboard.get_back_button()
    )
    await callback.answer()

@router.callback_query(F.data == "manage_tokens")
async def show_tokens_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return

    db = Database()
    tokens = await db.get_all_tokens()
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=AchievementsKeyboard.get_admin_tokens_keyboard(tokens)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_token_"))
async def start_token_edit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é")
        return

    token_id = int(callback.data.split("_")[2])
    await state.update_data(token_id=token_id)
    
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: üåü, üé®, üèÜ\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥",
        reply_markup=AchievementsKeyboard.get_back_button()
    )
    await state.set_state(TokenEditStates.waiting_for_emoji)
    await callback.answer()

@router.message(TokenEditStates.waiting_for_emoji)
async def process_token_emoji(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏"""
    db = Database()
    if not db.is_valid_emoji(message.text):
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —ç–º–æ–¥–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: üåü, üé®, üèÜ",
            reply_markup=AchievementsKeyboard.get_back_button()
        )
        return

    await state.update_data(emoji=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.\n"
        "–ü—Ä–∏–º–µ—Ä: –ó–≤–µ–∑–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
        reply_markup=AchievementsKeyboard.get_back_button()
    )
    await state.set_state(TokenEditStates.waiting_for_name)

@router.message(TokenEditStates.waiting_for_name)
async def process_token_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    db = Database()
    if not db.is_valid_name(message.text):
        await message.answer(
            "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: –ó–≤–µ–∑–¥–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
            reply_markup=AchievementsKeyboard.get_back_button()
        )
        return

    data = await state.get_data()
    success = await db.update_token(data['token_id'], data['emoji'], message.text)
    
    if success:
        await message.answer(
            "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=MainMenuKeyboard.get_keyboard(user_id=message.from_user.id)
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞",
            reply_markup=MainMenuKeyboard.get_keyboard(user_id=message.from_user.id)
        )
    await state.clear()

@router.callback_query(F.data.in_({"back_to_main", "back_to_achievements", "back_to_admin"}))
async def process_back_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" """
    await state.clear()
    
    if callback.data == "back_to_main":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
        )
    elif callback.data == "back_to_achievements":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=AchievementsKeyboard.get_main_keyboard()
        )
    elif callback.data == "back_to_admin":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await callback.message.edit_text(
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=MainMenuKeyboard.get_keyboard(user_id=callback.from_user.id)
        )
    
    await callback.answer() 