from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

class TongueTwistersKeyboard:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ä–∞–∑–¥–µ–ª–∞ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫"""
    
    @staticmethod
    def get_menu_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–∞"""
        kb = InlineKeyboardBuilder()
        
        buttons = [
            ("üéØ –ù–∞—á–∞—Ç—å", "start_tongue_twisters"),
            ("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main")
        ]
        
        for text, callback_data in buttons:
            kb.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        kb.adjust(1)
        
        return kb.as_markup()
    
    @staticmethod
    def get_navigation_keyboard(current_index: int, total_twisters: int, twister_id: int, is_completed: bool = False) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞–º"""
        kb = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if not is_completed:
            kb.add(InlineKeyboardButton(
                text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª",
                callback_data=f"complete_twister_{twister_id}"
            ))
            kb.add(InlineKeyboardButton(
                text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª",
                callback_data=f"skip_twister_{twister_id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons = []
        if current_index > 0:
            buttons.append(("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"prev_{current_index}"))
        if current_index < total_twisters - 1:
            buttons.append(("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", f"next_{current_index}"))
            
        for text, callback_data in buttons:
            kb.add(InlineKeyboardButton(text=text, callback_data=callback_data))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        kb.add(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_tongue_twisters"
        ))
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ä—è–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å),
        # –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥, –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω–æ
        if not is_completed:
            kb.adjust(2, len(buttons), 1)
        else:
            kb.adjust(len(buttons), 1)
        
        return kb.as_markup()
    
    @staticmethod
    def get_back_button() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_tongue_twisters"
        ))
        return kb.as_markup() 