from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

ITEMS_PER_PAGE = 5

class AdminKeyboard:
    @staticmethod
    def get_menu_keyboard() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        builder = InlineKeyboardBuilder()
        
        buttons = [
            ("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "admin_users"),
            ("üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Ç–æ–Ω–∞–º–∏", "admin_tokens"),
            ("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", "admin_subscriptions"),
            ("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", "admin_content"),
            ("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back_to_main")
        ]
        
        for text, callback_data in buttons:
            builder.button(text=text, callback_data=callback_data)
        
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def get_users_keyboard(users: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            builder.button(
                text=f"{user['full_name']} (@{user['username']})",
                callback_data=f"user_{user['id']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(("‚¨ÖÔ∏è", f"users_page_{page-1}"))
        if page < total_pages:
            nav_buttons.append(("‚û°Ô∏è", f"users_page_{page+1}"))
        
        for text, callback_data in nav_buttons:
            builder.button(text=text, callback_data=callback_data)
            
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        if len(users) > 0:
            if len(nav_buttons) > 0:
                builder.adjust(1, len(nav_buttons), 1)
            else:
                builder.adjust(1)
        else:
            builder.adjust(1)
            
        return builder.as_markup()
    
    @staticmethod
    def get_subscriptions_keyboard(subscriptions: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫"""
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="manage_tariffs")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        for sub in subscriptions:
            builder.button(
                text=f"{sub['user_name']} - {sub['tariff_name']} –¥–æ {sub['end_date']}",
                callback_data=f"subscription_{sub['id']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(("‚¨ÖÔ∏è", f"subs_page_{page-1}"))
        if page < total_pages:
            nav_buttons.append(("‚û°Ô∏è", f"subs_page_{page+1}"))
        
        for text, callback_data in nav_buttons:
            builder.button(text=text, callback_data=callback_data)
            
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        
        builder.adjust(1, 1, len(nav_buttons), 1)
        return builder.as_markup()
    
    @staticmethod
    def get_tariffs_keyboard(tariffs: list) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        for tariff in tariffs:
            builder.button(
                text=f"{tariff['name']} - {tariff['price']}‚ÇΩ",
                callback_data=f"edit_tariff_{tariff['id']}"
            )
        
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")
        
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def get_content_keyboard() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        builder = InlineKeyboardBuilder()
        
        buttons = [
            ("üìù –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å", "show_content:daily:1"),
            ("ü§î –ó–∞–≥–∞–¥–∫–∏", "show_content:riddles:1"),
            ("üëÑ –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏", "show_content:twisters:1"),
            ("üß© –†–µ–±—É—Å—ã", "show_content:puzzles:1"),
            ("üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ", "show_content:creativity:drawing:1"),
            ("üìÑ –ë—É–º–∞–≥–∞", "show_content:creativity:paper:1"),
            ("üè∫ –õ–µ–ø–∫–∞", "show_content:creativity:sculpting:1"),
            ("üó£ –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞", "show_content:articular:1"),
            ("üß† –ù–µ–π—Ä–æ –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞", "show_content:neuro:1")
        ]
        
        for text, callback_data in buttons:
            builder.button(text=text, callback_data=callback_data)
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
        
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def get_content_list_keyboard(items: list, page: int, total_pages: int, content_type: str) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        builder = InlineKeyboardBuilder()
        
        start_idx = (page - 1) * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        current_items = items[start_idx:end_idx]
        
        for item in current_items:
            if content_type == "daily":
                text = item.get("task_text", "") or item.get("text", "")
            elif content_type == "riddles":
                text = item.get("text", "") or item.get("question", "")
            elif content_type == "twisters":
                text = item.get("text", "")
            elif content_type == "puzzles":
                text = f"–†–µ–±—É—Å #{item.get('id', 0)}"
            elif content_type.startswith("creativity_"):
                text = item.get("title", "")
            elif content_type in ["articular", "neuro"]:
                text = item.get("title", "")
            else:
                text = str(item)

            if len(text) > 30:
                text = text[:27] + "..."
            
            item_id = item.get('id', 0)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            builder.button(
                text=text,
                callback_data=f"view_content:{content_type}:{item_id}"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            builder.button(
                text="üóë",
                callback_data=f"delete_content:{content_type}:{item_id}"
            )

        builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"show_content:{content_type}:{page-1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data="ignore"
        ))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"show_content:{content_type}:{page+1}"
            ))
        
        builder.row(*nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        builder.row(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
            callback_data=f"admin_add_content:{content_type}"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.row(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_content_menu"
        ))

        return builder.as_markup()

    @staticmethod
    def get_delete_confirmation_keyboard(content_type: str, content_id: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete:{content_type}:{content_id}"
        )
        builder.button(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
            callback_data=f"show_content:{content_type}:1"
        )
        
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def get_cancel_keyboard() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
        return builder.as_markup()

    @staticmethod
    def get_tokens_keyboard(tokens: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        for token in tokens:
            builder.button(
                text=f"{token['emoji']} {token['name']}",
                callback_data=f"token_{token['id']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(("‚¨ÖÔ∏è", f"tokens_page_{page-1}"))
        if page < total_pages:
            nav_buttons.append(("‚û°Ô∏è", f"tokens_page_{page+1}"))
        
        for text, callback_data in nav_buttons:
            builder.button(text=text, callback_data=callback_data)
            
        builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        
        builder.adjust(1, len(nav_buttons), 1)
        return builder.as_markup() 