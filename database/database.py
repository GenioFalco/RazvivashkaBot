import aiosqlite
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Tuple
from config import config
import re
import random
import asyncio
import logging
import os
import tempfile

class Database:
    def __init__(self, db_path: str = config.DATABASE_PATH):
        self.db_path = db_path
        self.temp_dir = tempfile.mkdtemp()  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    async def initialize_videos(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"""
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor = await db.execute('SELECT COUNT(*) FROM creativity_videos')
            count = (await cursor.fetchone())[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            if count == 0:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
                creativity_videos = [
                    (
                        "drawing",
                        "–†–∏—Å—É–µ–º —Ü–≤–µ—Ç–æ–∫",
                        "–ù–∞—É—á–∏–º—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç–æ–∫ –ø—Ä–æ—Å—Ç—ã–º –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º",
                        "https://drive.google.com/file/d/18LJeTjNnUTVV2jQIApkSgDlJL_FC95um/view?usp=sharing",
                        1
                    ),
                    (
                        "paper",
                        "–û—Ä–∏–≥–∞–º–∏ –ª–µ–±–µ–¥—å",
                        "–°–æ–∑–¥–∞–µ–º –∏–∑—è—â–Ω–æ–≥–æ –ª–µ–±–µ–¥—è –≤ —Ç–µ—Ö–Ω–∏–∫–µ –æ—Ä–∏–≥–∞–º–∏",
                        "https://drive.google.com/file/d/1XnvBN3xpaWDlMzR8cmf-SPXJTUVdVcMJ/view?usp=sharing",
                        1
                    ),
                    (
                        "sculpting",
                        "–õ–µ–ø–∏–º –∫–æ—Ç–∏–∫–∞",
                        "–£—á–∏–º—Å—è –ª–µ–ø–∏—Ç—å –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –∏–∑ –ø–ª–∞—Å—Ç–∏–ª–∏–Ω–∞",
                        "https://drive.google.com/file/d/1Cal7FTL6zlu55W_mBYkrCFhQmRDh47xv/view?usp=sharing",
                        1
                    )
                ]
                
                await db.executemany('''
                    INSERT INTO creativity_videos 
                    (type, title, description, video_url, sequence_number)
                    VALUES (?, ?, ?, ?, ?)
                ''', creativity_videos)
                
                await db.commit()

    async def create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect(self.db_path) as db:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tokens (
                    id INTEGER PRIMARY KEY,
                    emoji TEXT NOT NULL,
                    name TEXT NOT NULL,
                    description TEXT NOT NULL
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    join_date TEXT DEFAULT (date('now'))
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_achievements (
                    user_id INTEGER,
                    token_id INTEGER,
                    count INTEGER DEFAULT 0,
                    PRIMARY KEY (user_id, token_id),
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    FOREIGN KEY (token_id) REFERENCES tokens (id)
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS daily_tasks (
                    id INTEGER PRIMARY KEY,
                    text TEXT NOT NULL,
                    description TEXT NOT NULL
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_daily_tasks (
                    user_id INTEGER,
                    task_id INTEGER,
                    completion_date DATE,
                    PRIMARY KEY (user_id, task_id, completion_date),
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    FOREIGN KEY (task_id) REFERENCES daily_tasks (id)
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–≥–∞–¥–æ–∫
            await db.execute('''
                CREATE TABLE IF NOT EXISTS riddles (
                    id INTEGER PRIMARY KEY,
                    text TEXT NOT NULL,
                    answer TEXT NOT NULL
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_riddles (
                    user_id INTEGER,
                    riddle_id INTEGER,
                    completion_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, riddle_id),
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    FOREIGN KEY (riddle_id) REFERENCES riddles (id)
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS exercise_videos (
                    id INTEGER PRIMARY KEY,
                    type TEXT NOT NULL,
                    title TEXT NOT NULL,
                    description TEXT NOT NULL,
                    video_url TEXT NOT NULL
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_exercise_views (
                    user_id INTEGER,
                    video_id INTEGER,
                    view_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, video_id),
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    FOREIGN KEY (video_id) REFERENCES exercise_videos (id)
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∏–¥–µ–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
            await db.execute('''
                CREATE TABLE IF NOT EXISTS creativity_videos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type TEXT NOT NULL,
                    title TEXT NOT NULL,
                    description TEXT NOT NULL,
                    video_url TEXT NOT NULL,
                    sequence_number INTEGER
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_creativity_completions (
                    user_id INTEGER,
                    video_id INTEGER,
                    completion_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, video_id),
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    FOREIGN KEY (video_id) REFERENCES creativity_videos (id)
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω "–ê–ª–º–∞–∑" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await db.execute('''
                INSERT OR IGNORE INTO tokens (id, emoji, name, description)
                VALUES (9, "üíé", "–ê–ª–º–∞–∑", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤")
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å–æ–∫
            await db.execute("""
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT NOT NULL,
                    duration_days INTEGER NOT NULL,
                    price REAL NOT NULL
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute("""
                CREATE TABLE IF NOT EXISTS user_subscriptions (
                    user_id INTEGER NOT NULL,
                    subscription_id INTEGER NOT NULL,
                    start_date TEXT NOT NULL DEFAULT (date('now')),
                    end_date TEXT NOT NULL,
                    is_active BOOLEAN DEFAULT TRUE,
                    FOREIGN KEY (user_id) REFERENCES users(id),
                    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id),
                    PRIMARY KEY (user_id, subscription_id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            await db.execute("""
                CREATE TABLE IF NOT EXISTS free_attempts (
                    user_id INTEGER,
                    feature TEXT,
                    attempts INTEGER DEFAULT 0,
                    PRIMARY KEY (user_id, feature),
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await db.execute("""
                CREATE TABLE IF NOT EXISTS referrals (
                    referrer_id INTEGER,
                    referred_id INTEGER,
                    join_date TEXT NOT NULL DEFAULT (date('now')),
                    is_active BOOLEAN DEFAULT FALSE,
                    reward_claimed BOOLEAN DEFAULT FALSE,
                    PRIMARY KEY (referrer_id, referred_id),
                    FOREIGN KEY (referrer_id) REFERENCES users (id),
                    FOREIGN KEY (referred_id) REFERENCES users (id)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É puzzles –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–≤–æ–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            await db.execute("""
                CREATE TABLE IF NOT EXISTS puzzles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    image_data BLOB NOT NULL,
                    answer1 TEXT NOT NULL,
                    answer2 TEXT NOT NULL,
                    answer3 TEXT NOT NULL
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–±—É—Å–∞—Ö
            await db.execute("""
                CREATE TABLE IF NOT EXISTS user_puzzles (
                    user_id INTEGER,
                    puzzle_id INTEGER,
                    date DATE,
                    solved1 BOOLEAN DEFAULT FALSE,
                    solved2 BOOLEAN DEFAULT FALSE,
                    solved3 BOOLEAN DEFAULT FALSE,
                    PRIMARY KEY (user_id, puzzle_id, date),
                    FOREIGN KEY (user_id) REFERENCES users (id),
                    FOREIGN KEY (puzzle_id) REFERENCES puzzles (id)
                )
            """)
            
            await db.commit()

    async def initialize_subscriptions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞—Ä–∏—Ñ—ã
        async with aiosqlite.connect(self.db_path) as db:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã
            await db.execute("DELETE FROM subscriptions")
            
            subscriptions = [
                {
                    'name': '–ú–µ—Å—è—Ü —Ä–∞–∑–≤–∏—Ç–∏—è',
                    'description': 'üåü –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 30 –¥–Ω–µ–π',
                    'duration_days': 30,
                    'price': 299.0
                },
                {
                    'name': '–ö–≤–∞—Ä—Ç–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è',
                    'description': 'üåü –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 90 –¥–Ω–µ–π\nüíé –°–∫–∏–¥–∫–∞ 20%',
                    'duration_days': 90,
                    'price': 719.0
                },
                {
                    'name': '–ü–æ–ª–≥–æ–¥–∞ —Ä–∞–∑–≤–∏—Ç–∏—è',
                    'description': 'üåü –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 180 –¥–Ω–µ–π\nüíé –°–∫–∏–¥–∫–∞ 30%',
                    'duration_days': 180,
                    'price': 1499.0
                },
                {
                    'name': '–ì–æ–¥ —Ä–∞–∑–≤–∏—Ç–∏—è',
                    'description': 'üåü –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 365 –¥–Ω–µ–π\nüíé –°–∫–∏–¥–∫–∞ 40%\nüéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                    'duration_days': 365,
                    'price': 2149.0
                }
            ]
            
            for sub in subscriptions:
                await db.execute("""
                    INSERT INTO subscriptions (name, description, duration_days, price)
                    VALUES (?, ?, ?, ?)
                """, (sub['name'], sub['description'], sub['duration_days'], sub['price']))
            await db.commit()

    async def get_user_subscription(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute("""
                SELECT s.*, us.start_date, us.end_date
                FROM subscriptions s
                JOIN user_subscriptions us ON s.id = us.subscription_id
                WHERE us.user_id = ? AND us.is_active = TRUE
                AND date('now') <= date(us.end_date)
                ORDER BY us.end_date DESC
                LIMIT 1
            """, (user_id,))
            result = await cursor.fetchone()
            return dict(result) if result else None

    async def add_subscription(self, user_id: int, subscription_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_id (int): ID —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
                cursor = await db.execute(
                    "SELECT duration_days FROM subscriptions WHERE id = ?",
                    (subscription_id,)
                )
                subscription = await cursor.fetchone()
                if not subscription:
                    return False
                
                duration_days = subscription[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                cursor = await db.execute(
                    "SELECT end_date FROM user_subscriptions WHERE user_id = ? AND is_active = TRUE",
                    (user_id,)
                )
                current_sub = await cursor.fetchone()
                
                if current_sub:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
                    end_date = datetime.strptime(current_sub[0], '%Y-%m-%d')
                    new_end_date = end_date + timedelta(days=duration_days)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                    new_end_date = datetime.now() + timedelta(days=duration_days)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                await db.execute(
                    "UPDATE user_subscriptions SET is_active = FALSE WHERE user_id = ?",
                    (user_id,)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                start_date = datetime.now().strftime('%Y-%m-%d')
                new_end_date_str = new_end_date.strftime('%Y-%m-%d')
                
                await db.execute("""
                    INSERT INTO user_subscriptions (user_id, subscription_id, start_date, end_date)
                    VALUES (?, ?, ?, ?)
                """, (user_id, subscription_id, start_date, new_end_date_str))
                
                await db.commit()
                return True
        except Exception as e:
            print(f"Error adding subscription: {e}")
            return False

    async def get_all_subscriptions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute("SELECT * FROM subscriptions ORDER BY duration_days")
            return [dict(row) for row in await cursor.fetchall()]

    async def check_feature_access(self, user_id: int, feature_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await self.get_user_subscription(user_id)
        if subscription:
            return True

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute("""
                SELECT attempts_used, last_attempt_date
                FROM free_attempts
                WHERE user_id = ? AND feature_type = ?
            """, (user_id, feature_type))
            result = await cursor.fetchone()

            # –î–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∫—Ä–æ–º–µ daily_tasks –∏ drawing —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞
            if feature_type not in ['daily_tasks', 'drawing']:
                return False

            if not result:
                # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
                return True

            attempts_used, last_attempt_date = result

            if feature_type == 'daily_tasks':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º
                if last_attempt_date:
                    cursor = await db.execute("SELECT date('now')")
                    current_date = (await cursor.fetchone())[0]
                    if current_date == last_attempt_date:
                        return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
                    return False  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
                return True  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
            elif feature_type == 'drawing':
                # –î–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
                return attempts_used < 1

            return False

    async def increment_feature_attempt(self, user_id: int, feature_type: str) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
                INSERT INTO free_attempts (user_id, feature_type, attempts_used, last_attempt_date)
                VALUES (?, ?, 1, date('now'))
                ON CONFLICT (user_id, feature_type) DO UPDATE SET
                attempts_used = attempts_used + 1,
                last_attempt_date = date('now')
            """, (user_id, feature_type))
            await db.commit()

    async def get_all_tokens(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('SELECT * FROM tokens') as cursor:
                tokens = await cursor.fetchall()
                return [{
                    'id': token[0],
                    'emoji': token[1],
                    'name': token[2],
                    'description': token[3]
                } for token in tokens]

    async def update_token(self, token_id: int, new_emoji: str, new_name: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'UPDATE tokens SET emoji = ?, name = ? WHERE id = ?',
                    (new_emoji, new_name, token_id)
                )
                await db.commit()
                return True
        except Exception:
            return False

    @staticmethod
    def is_valid_emoji(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–∏–µ)
        return len(text) == 1 and ord(text) > 1000

    @staticmethod
    def is_valid_name(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        return bool(re.match(r'^[–∞-—è–ê-–Øa-zA-Z\s]+$', text))

    async def add_user(self, telegram_id: int, username: Optional[str], full_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT OR IGNORE INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)',
                    (telegram_id, username, full_name)
                )
                await db.commit()
                return True
        except Exception:
            return False

    async def get_user(self, telegram_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                'SELECT * FROM users WHERE telegram_id = ?',
                (telegram_id,)
            ) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        'id': result[0],
                        'telegram_id': result[1],
                        'username': result[2],
                        'full_name': result[3],
                        'registration_date': result[4]
                    }
                return None

    async def get_all_users(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('SELECT * FROM users') as cursor:
                users = await cursor.fetchall()
                return [{
                    'id': user[0],
                    'telegram_id': user[1],
                    'username': user[2],
                    'full_name': user[3],
                    'registration_date': user[4]
                } for user in users]

    async def get_user_achievements(self, user_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            tokens = await self.get_all_tokens()
            for token in tokens:
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, ?, 0)
                ''', (user_id, token['id']))
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
            async with db.execute('''
                SELECT token_id, count FROM achievements
                WHERE user_id = ?
            ''', (user_id,)) as cursor:
                achievements = await cursor.fetchall()
                return {ach[0]: ach[1] for ach in achievements}

    async def get_user_daily_tasks(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_daily_tasks 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                async with db.execute('SELECT COUNT(*) FROM daily_tasks') as cursor:
                    total_tasks = (await cursor.fetchone())[0]
                    if total_tasks < 5:
                        return [], 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                
                # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                async with db.execute('SELECT id, task_text FROM daily_tasks') as cursor:
                    all_tasks = await cursor.fetchall()
                    selected_tasks = random.sample(all_tasks, 5)
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for task in selected_tasks:
                    await db.execute('''
                        INSERT INTO user_daily_tasks (user_id, task_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, task[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT dt.id, dt.task_text, udt.completed 
                FROM daily_tasks dt
                JOIN user_daily_tasks udt ON dt.id = udt.task_id
                WHERE udt.user_id = ? AND udt.date = ?
            ''', (user_id, today)) as cursor:
                tasks = await cursor.fetchall()
                tasks_list = [{
                    'id': task[0],
                    'text': task[1],
                    'completed': bool(task[2])
                } for task in tasks]
                completed_count = sum(1 for task in tasks_list if task['completed'])
                
                return tasks_list, completed_count

    async def get_token_count(self, user_id: int, token_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('''
                SELECT count FROM achievements
                WHERE user_id = ? AND token_id = ?
            ''', (user_id, token_id)) as cursor:
                result = await cursor.fetchone()
                return result[0] if result else 0

    async def debug_achievements(self, user_id: int):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã achievements"""
        async with aiosqlite.connect(self.db_path) as db:
            print("\nDebug achievements table:")
            async with db.execute('''
                SELECT a.user_id, a.token_id, a.count, t.name
                FROM achievements a
                JOIN tokens t ON a.token_id = t.id
                WHERE a.user_id = ?
            ''', (user_id,)) as cursor:
                rows = await cursor.fetchall()
                for row in rows:
                    print(f"User {row[0]}, Token {row[1]} ({row[3]}): {row[2]} —à—Ç.")
            
            print("\nDebug user_daily_tasks table:")
            today = date.today()
            async with db.execute('''
                SELECT task_id, completed
                FROM user_daily_tasks
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                rows = await cursor.fetchall()
                for row in rows:
                    print(f"Task {row[0]}: {'Completed' if row[1] else 'Not completed'}")

    async def complete_daily_task(self, user_id: int, task_id: int) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                today = date.today()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                async with db.execute('''
                    SELECT completed FROM user_daily_tasks
                    WHERE user_id = ? AND task_id = ? AND date = ?
                ''', (user_id, task_id, today)) as cursor:
                    result = await cursor.fetchone()
                    if result and result[0]:
                        return False  # –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                await db.execute('''
                    UPDATE user_daily_tasks 
                    SET completed = TRUE 
                    WHERE user_id = ? AND task_id = ? AND date = ?
                ''', (user_id, task_id, today))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ achievements –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ó–≤–µ–∑–¥–∞ –¥–Ω—è"
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, 2, 0)
                ''', (user_id,))
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                await db.execute('''
                    UPDATE achievements 
                    SET count = count + 1,
                        last_updated = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND token_id = 2
                ''', (user_id,))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                async with db.execute('''
                    SELECT COUNT(*) FROM user_daily_tasks
                    WHERE user_id = ? AND date = ? AND completed = TRUE
                ''', (user_id, today)) as cursor:
                    completed_count = (await cursor.fetchone())[0]
                    
                # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ 5 –∑–∞–¥–∞–Ω–∏–π, –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                if completed_count == 5:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è"
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, 8, 0)
                    ''', (user_id,))
                    
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = 8
                    ''', (user_id,))
                
                await db.commit()
                print(f"Completing task {task_id} for user {user_id}")
                print(f"Task completion success: True")
                print(f"Completed tasks count: {completed_count}")
                return True
        except Exception as e:
            print(f"Error in complete_daily_task: {e}")
            return False 

    async def get_token_by_id(self, token_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –ø–æ –µ–≥–æ id."""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                "SELECT * FROM tokens WHERE id = ?",
                (token_id,)
            ) as cursor:
                token = await cursor.fetchone()
                if token:
                    return dict(token)
                return None 

    async def add_achievement(self, user_id: int, token_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        max_retries = 3
        retry_delay = 0.1  # 100ms
        
        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(self.db_path) as db:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, ?, 0)
                    ''', (user_id, token_id))
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = ?
                    ''', (user_id, token_id))
                    
                    await db.commit()
                    return True
            except Exception as e:
                if "database is locked" in str(e) and attempt < max_retries - 1:
                    print(f"Database locked, retrying... (attempt {attempt + 1})")
                    await asyncio.sleep(retry_delay * (attempt + 1))
                    continue
                print(f"Error in add_achievement: {e}")
                return False
        return False

    async def get_random_token(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                async with db.execute(
                    "SELECT * FROM tokens WHERE id != 8 ORDER BY RANDOM() LIMIT 1"
                ) as cursor:
                    token = await cursor.fetchone()
                    if token:
                        return dict(token)
                    return None
        except Exception as e:
            print(f"Error in get_random_token: {e}")
            return None 

    async def get_user_riddles(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥–∞–¥–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_riddles 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
                async with db.execute('SELECT id, question, answer FROM riddles ORDER BY RANDOM() LIMIT 5') as cursor:
                    selected_riddles = await cursor.fetchall()
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for riddle in selected_riddles:
                    await db.execute('''
                        INSERT INTO user_riddles (user_id, riddle_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, riddle[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT r.id, r.question, r.answer, ur.completed 
                FROM riddles r
                JOIN user_riddles ur ON r.id = ur.riddle_id
                WHERE ur.user_id = ? AND ur.date = ?
                ORDER BY ur.id
            ''', (user_id, today)) as cursor:
                riddles = await cursor.fetchall()
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
            async with db.execute('''
                SELECT COUNT(*) FROM user_riddles
                WHERE user_id = ? AND date = ? AND completed = TRUE
            ''', (user_id, today)) as cursor:
                completed_count = (await cursor.fetchone())[0]
                
            return [{
                'id': riddle[0],
                'question': riddle[1],
                'answer': riddle[2],
                'completed': riddle[3]
            } for riddle in riddles], completed_count

    async def check_riddle_answer(self, user_id: int, riddle_id: int, answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É –∏ –æ—Ç–º–µ—á–∞–µ—Ç –µ—ë –∫–∞–∫ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—É—é –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            async with db.execute('''
                SELECT r.answer FROM riddles r
                JOIN user_riddles ur ON r.id = ur.riddle_id
                WHERE ur.user_id = ? AND ur.riddle_id = ? AND ur.date = ?
            ''', (user_id, riddle_id, today)) as cursor:
                result = await cursor.fetchone()
                if not result:
                    return False
                
                correct_answer = result[0].lower()
                user_answer = answer.lower()
                
                if correct_answer == user_answer:
                    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–≥–∞–¥–∫—É –∫–∞–∫ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—É—é
                    await db.execute('''
                        UPDATE user_riddles 
                        SET completed = TRUE
                        WHERE user_id = ? AND riddle_id = ? AND date = ?
                    ''', (user_id, riddle_id, today))
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ú—É–¥—Ä–µ—Ü" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, 7, 0)
                    ''', (user_id,))
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑–≥–∞–¥–∫—É
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = 7
                    ''', (user_id,))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–≥–∞–¥–∫–∏ —Ä–∞–∑–≥–∞–¥–∞–Ω—ã
                    async with db.execute('''
                        SELECT COUNT(*) FROM user_riddles
                        WHERE user_id = ? AND date = ? AND completed = TRUE
                    ''', (user_id, today)) as cursor:
                        completed_count = (await cursor.fetchone())[0]
                        
                        if completed_count == 5:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                            await db.execute('''
                                INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                                VALUES (?, 8, 0)
                            ''', (user_id,))
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–Ω–∞–≥—Ä–∞–¥—É
                            await db.execute('''
                                UPDATE achievements 
                                SET count = count + 1,
                                    last_updated = CURRENT_TIMESTAMP
                                WHERE user_id = ? AND token_id = 8
                            ''', (user_id,))
                    
                    await db.commit()
                    return True
                return False

    async def spend_token(self, user_id: int, token_id: int) -> bool:
        """–¢—Ä–∞—Ç–∏—Ç –∂–µ—Ç–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
                async with db.execute('''
                    SELECT count FROM achievements
                    WHERE user_id = ? AND token_id = ?
                ''', (user_id, token_id)) as cursor:
                    result = await cursor.fetchone()
                    if not result or result[0] <= 0:
                        return False
                    
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
                await db.execute('''
                    UPDATE achievements
                    SET count = count - 1
                    WHERE user_id = ? AND token_id = ?
                ''', (user_id, token_id))
                
                await db.commit()
                return True
        except Exception:
            return False 

    async def get_next_exercise_video(self, user_id: int, exercise_type: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            cursor = await db.execute("""
                SELECT v.*, 
                       (SELECT status FROM user_exercise_views 
                        WHERE user_id = ? AND video_id = v.id 
                        AND date(date) = date(?) 
                        ORDER BY id DESC LIMIT 1) as view_status,
                       (SELECT COUNT(*) FROM user_exercise_views 
                        WHERE user_id = ? AND video_id = v.id 
                        AND date(date) = date(?) 
                        AND (status = 'full' OR status = 'partial')) as completed_today
                FROM exercise_videos v
                WHERE v.type = ?
                ORDER BY v.id
                LIMIT 1
            """, (user_id, today, user_id, today, exercise_type))
            
            video = await cursor.fetchone()
            if video:
                result = dict(video)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                result['already_viewed'] = result.get('completed_today', 0) > 0
                result['view_status'] = result.get('view_status')
                return result
            return None

    async def record_exercise_view(self, user_id: int, video_id: int, status: str) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        max_retries = 3
        base_delay = 0.1  # 100ms
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
        if status == 'not_done':
            normalized_status = 'not_done'
        elif status == 'partial':
            normalized_status = 'partial'
        else:
            normalized_status = 'full'
        
        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(self.db_path) as db:
                    await db.execute(
                        """
                        INSERT INTO user_exercise_views (user_id, video_id, status, date)
                        VALUES (?, ?, ?, date('now'))
                        """,
                        (user_id, video_id, normalized_status)
                    )
                    await db.commit()
                    return
                    
            except Exception as e:
                delay = base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                print(f"Attempt {attempt + 1} failed. Retrying in {delay:.2f}s...")
                await asyncio.sleep(delay)
                continue
                
        print(f"Failed to record exercise view after {max_retries} attempts") 

    async def get_exercise_video(self, video_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ ID"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                "SELECT * FROM exercise_videos WHERE id = ?",
                (video_id,)
            ) as cursor:
                video = await cursor.fetchone()
                if video:
                    return dict(video)
                return None 

    async def update_achievement(self, user_id: int, token_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω–∞
                async with db.execute(
                    'SELECT count FROM achievements WHERE user_id = ? AND token_id = ?',
                    (user_id, token_id)
                ) as cursor:
                    result = await cursor.fetchone()
                    
                if result is None:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    await db.execute(
                        'INSERT INTO achievements (user_id, token_id, count, last_updated) VALUES (?, ?, 1, CURRENT_TIMESTAMP)',
                        (user_id, token_id)
                    )
                else:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    await db.execute(
                        'UPDATE achievements SET count = count + 1, last_updated = CURRENT_TIMESTAMP WHERE user_id = ? AND token_id = ?',
                        (user_id, token_id)
                    )
                
                await db.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return False

    async def get_token_by_id(self, token_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –ø–æ –µ–≥–æ ID"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                'SELECT * FROM tokens WHERE id = ?',
                (token_id,)
            ) as cursor:
                token = await cursor.fetchone()
                if token:
                    return {
                        'id': token[0],
                        'emoji': token[1],
                        'name': token[2],
                        'description': token[3]
                    }
                return None 

    async def get_user_puzzles(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–±—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–±—É—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT p.id, p.image_data, p.answer1, p.answer2, p.answer3,
                       up.solved1, up.solved2, up.solved3
                FROM puzzles p
                LEFT JOIN user_puzzles up ON p.id = up.puzzle_id 
                    AND up.user_id = ? AND up.date = ?
                ORDER BY p.id
                LIMIT 3
            ''', (user_id, today)) as cursor:
                puzzles = await cursor.fetchall()
                
                if not puzzles:
                    return [], 0

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                result = []
                for puzzle in puzzles:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    temp_path = os.path.join(self.temp_dir, f"puzzle_{puzzle[0]}.png")
                    with open(temp_path, "wb") as f:
                        f.write(puzzle[1])
                    
                    result.append({
                        'id': puzzle[0],
                        'image_path': temp_path,
                        'answers': [puzzle[2], puzzle[3], puzzle[4]],
                        'solved': [
                            puzzle[5] if puzzle[5] is not None else False,
                            puzzle[6] if puzzle[6] is not None else False,
                            puzzle[7] if puzzle[7] is not None else False
                        ]
                    })

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–µ–±—É—Å–æ–≤
                total_solved = sum(
                    sum(1 for solved in puzzle['solved'] if solved)
                    for puzzle in result
                )
                
                return result, total_solved

    async def check_puzzle_answer(self, user_id: int, puzzle_id: int, rebus_number: int, answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–±—É—Å –∏ –æ—Ç–º–µ—á–∞–µ—Ç –µ–≥–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            async with db.execute('''
                SELECT answer1, answer2, answer3 FROM puzzles
                WHERE id = ?
            ''', (puzzle_id,)) as cursor:
                answers = await cursor.fetchone()
                if not answers:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                correct_answer = answers[rebus_number - 1].lower()
                if answer.lower() != correct_answer:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ user_puzzles
                async with db.execute('''
                    SELECT COUNT(*) FROM user_puzzles
                    WHERE user_id = ? AND puzzle_id = ? AND date = ?
                ''', (user_id, puzzle_id, today)) as cursor:
                    count = await cursor.fetchone()
                    
                if count[0] == 0:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    await db.execute('''
                        INSERT INTO user_puzzles (user_id, puzzle_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, puzzle_id, today))
                
                # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–±—É—Å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π
                solved_field = f'solved{rebus_number}'
                await db.execute(f'''
                    UPDATE user_puzzles
                    SET {solved_field} = TRUE
                    WHERE user_id = ? AND puzzle_id = ? AND date = ?
                ''', (user_id, puzzle_id, today))
                
                await db.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ä–µ–±—É—Å—ã –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ —Ä–µ—à–µ–Ω—ã
                async with db.execute('''
                    SELECT solved1, solved2, solved3
                    FROM user_puzzles
                    WHERE user_id = ? AND puzzle_id = ? AND date = ?
                ''', (user_id, puzzle_id, today)) as cursor:
                    solved = await cursor.fetchone()
                    
                if solved and all(solved):
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤"
                    await self.add_achievement(user_id, 3)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ä–µ–±—É—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–µ—à–µ–Ω—ã
                    async with db.execute('''
                        SELECT COUNT(*) FROM user_puzzles
                        WHERE user_id = ? AND date = ? AND
                              solved1 = TRUE AND solved2 = TRUE AND solved3 = TRUE
                    ''', (user_id, today)) as cursor:
                        all_solved_count = await cursor.fetchone()
                        
                    if all_solved_count and all_solved_count[0] == 3:
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è"
                        await self.add_achievement(user_id, 8)
                
                return True

    async def get_user_tongue_twisters(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_tongue_twisters 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏
                async with db.execute('SELECT id, text FROM tongue_twisters') as cursor:
                    all_twisters = await cursor.fetchall()
                    selected_twisters = random.sample(all_twisters, 3)
                    
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for twister in selected_twisters:
                    await db.execute('''
                        INSERT INTO user_tongue_twisters (user_id, twister_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, twister[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT tt.id, tt.text, utt.completed 
                FROM tongue_twisters tt
                JOIN user_tongue_twisters utt ON tt.id = utt.twister_id
                WHERE utt.user_id = ? AND utt.date = ?
            ''', (user_id, today)) as cursor:
                twisters = await cursor.fetchall()
                twisters_list = [{
                    'id': twister[0],
                    'text': twister[1],
                    'completed': bool(twister[2])
                } for twister in twisters]
                completed_count = sum(1 for twister in twisters_list if twister['completed'])
                
                return twisters_list, completed_count

    async def complete_tongue_twister(self, user_id: int, twister_id: int) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                today = date.today()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                async with db.execute('''
                    SELECT completed FROM user_tongue_twisters
                    WHERE user_id = ? AND twister_id = ? AND date = ?
                ''', (user_id, twister_id, today)) as cursor:
                    result = await cursor.fetchone()
                    if result and result[0]:
                        return False  # –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                
                # –û—Ç–º–µ—á–∞–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                await db.execute('''
                    UPDATE user_tongue_twisters 
                    SET completed = TRUE 
                    WHERE user_id = ? AND twister_id = ? AND date = ?
                ''', (user_id, twister_id, today))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ achievements –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ì–æ–≤–æ—Ä—É–Ω"
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, 4, 0)
                ''', (user_id,))
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏
                await db.execute('''
                    UPDATE achievements 
                    SET count = count + 1,
                        last_updated = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND token_id = 4
                ''', (user_id,))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                async with db.execute('''
                    SELECT COUNT(*) FROM user_tongue_twisters
                    WHERE user_id = ? AND date = ? AND completed = TRUE
                ''', (user_id, today)) as cursor:
                    completed_count = (await cursor.fetchone())[0]
                    
                # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ 3 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏, –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                if completed_count == 3:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è"
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, 8, 0)
                    ''', (user_id,))
                    
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = 8
                    ''', (user_id,))
                
                await db.commit()
                return True
        except Exception as e:
            print(f"Error in complete_tongue_twister: {e}")
            return False 

    async def get_next_creativity_video(self, user_id: int, section: str, current_id: Optional[int] = None, direction: str = "next") -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                query = """
                    SELECT id, title, description, video_url
                    FROM creativity_videos
                    WHERE type = ?
                    ORDER BY sequence_number
                """
                async with db.execute(query, (section,)) as cursor:
                    videos = await cursor.fetchall()
                    
                if not videos:
                    return None
                    
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ
                if current_id is None:
                    return dict(videos[0])
                    
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
                current_index = next((i for i, v in enumerate(videos) if v['id'] == current_id), -1)
                if current_index == -1:
                    return dict(videos[0])
                    
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å
                if direction == "next":
                    next_index = current_index + 1
                else:
                    next_index = current_index - 1
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                if 0 <= next_index < len(videos):
                    return dict(videos[next_index])
                    
                return None
                
        except Exception as e:
            print(f"Error getting next creativity video: {e}")
            return None

    async def complete_creativity_masterclass(self, user_id: int, video_id: int) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR IGNORE INTO user_creativity_completions
                    (user_id, video_id) VALUES (?, ?)
                """, (user_id, video_id))
                await db.commit()
                return True
        except Exception as e:
            print(f"Error completing creativity masterclass: {e}")
            return False

    async def get_creativity_video_by_id(self, video_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ ID"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                async with db.execute("""
                    SELECT id, title, description, video_url, type
                    FROM creativity_videos
                    WHERE id = ?
                """, (video_id,)) as cursor:
                    video = await cursor.fetchone()
                    return dict(video) if video else None
        except Exception as e:
            print(f"Error getting creativity video by id: {e}")
            return None

    async def is_creativity_masterclass_completed(self, user_id: int, video_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("""
                    SELECT COUNT(*) FROM user_creativity_completions
                    WHERE user_id = ? AND video_id = ?
                """, (user_id, video_id)) as cursor:
                    count = await cursor.fetchone()
                    return count[0] > 0
        except Exception as e:
            print(f"Error checking creativity masterclass completion: {e}")
            return False

    async def get_referral_link(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"https://t.me/mvpRazvivashkaBot?start=ref_{user_id}"

    async def add_referral(self, referrer_id: int, referred_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–∞–∑—É"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR IGNORE INTO referrals (referrer_id, referred_id)
                    VALUES (?, ?)
                """, (referrer_id, referred_id))
                await db.commit()
                return True
        except Exception as e:
            logging.error(f"Error adding referral: {e}")
            return False

    async def activate_referral(self, referrer_id: int, referred_id: int) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                await db.execute("""
                    UPDATE referrals 
                    SET is_active = TRUE 
                    WHERE referrer_id = ? AND referred_id = ?
                """, (referrer_id, referred_id))
                
                # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
                cursor = await db.execute("""
                    SELECT is_active, reward_claimed 
                    FROM referrals 
                    WHERE referrer_id = ? AND referred_id = ?
                """, (referrer_id, referred_id))
                result = await cursor.fetchone()
                
                if result and result[0] and not result[1]:
                    # –î–æ–±–∞–≤–ª—è–µ–º 5 –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    await db.execute("""
                        UPDATE user_subscriptions 
                        SET end_date = date(end_date, '+5 days') 
                        WHERE user_id = ? AND is_active = TRUE
                    """, (referrer_id,))
                    
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—É—é
                    await db.execute("""
                        UPDATE referrals 
                        SET reward_claimed = TRUE 
                        WHERE referrer_id = ? AND referred_id = ?
                    """, (referrer_id, referred_id))
                
                await db.commit()
                return True
        except Exception as e:
            logging.error(f"Error activating referral: {e}")
            return False

    async def get_referral_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cursor = await db.execute("""
                SELECT COUNT(*) 
                FROM referrals 
                WHERE referrer_id = ? AND is_active = TRUE
            """, (user_id,))
            active_count = (await cursor.fetchone())[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cursor = await db.execute("""
                SELECT COUNT(*) 
                FROM referrals 
                WHERE referrer_id = ?
            """, (user_id,))
            total_count = (await cursor.fetchone())[0]
            
            return {
                'active': active_count,
                'total': total_count
            } 

    async def cleanup_temp_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for filename in os.listdir(self.temp_dir):
            file_path = os.path.join(self.temp_dir, filename)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except Exception as e:
                print(f"Error deleting {file_path}: {e}")
        try:
            os.rmdir(self.temp_dir)
        except Exception as e:
            print(f"Error deleting temp directory {self.temp_dir}: {e}") 

    async def add_puzzle(self, image_data: bytes, answer1: str, answer2: str, answer3: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–±—É—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT INTO puzzles (image_data, answer1, answer2, answer3) VALUES (?, ?, ?, ?)',
                    (image_data, answer1, answer2, answer3)
                )
                await db.commit()
                return True
        except Exception as e:
            print(f"Error adding puzzle: {e}")
            return False 

    async def add_creativity_video(self, title: str, description: str, video_url: str, video_type: str, sequence_number: Optional[int] = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                if sequence_number is None and video_type == "sculpting":
                    # –î–ª—è –ª–µ–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π sequence_number
                    async with db.execute("""
                        SELECT COALESCE(MAX(sequence_number), 0) + 1
                        FROM creativity_videos
                        WHERE type = ?
                    """, (video_type,)) as cursor:
                        sequence_number = (await cursor.fetchone())[0]
                
                await db.execute("""
                    INSERT INTO creativity_videos (type, title, description, video_url, sequence_number)
                    VALUES (?, ?, ?, ?, ?)
                """, (video_type, title, description, video_url, sequence_number))
                
                await db.commit()
                return True
        except Exception as e:
            print(f"Error adding creativity video: {e}")
            return False 

    async def get_all_creativity_videos(self, video_type: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                async with db.execute("""
                    SELECT id, title, description, video_url, sequence_number
                    FROM creativity_videos
                    WHERE type = ?
                    ORDER BY sequence_number
                """, (video_type,)) as cursor:
                    videos = await cursor.fetchall()
                    return [dict(video) for video in videos]
        except Exception as e:
            print(f"Error getting creativity videos: {e}")
            return [] 

    async def get_all_puzzles(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ä–µ–±—É—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    "SELECT id, answer1, answer2, answer3 FROM puzzles"
                )
                puzzles = await cursor.fetchall()
                return [dict(puzzle) for puzzle in puzzles]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–±—É—Å–æ–≤: {e}")
            return [] 

    async def get_all_daily_tasks(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    "SELECT id, task_text as text FROM daily_tasks"
                )
                tasks = await cursor.fetchall()
                return [dict(task) for task in tasks]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
            return []

    async def get_exercise_videos(self, exercise_type: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    "SELECT id, title, description, video_url FROM exercise_videos WHERE type = ?",
                    (exercise_type,)
                )
                videos = await cursor.fetchall()
                return [dict(video) for video in videos]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
            return []

    async def get_all_riddles(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    "SELECT id, question as text, answer FROM riddles"
                )
                riddles = await cursor.fetchall()
                return [dict(riddle) for riddle in riddles]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≥–∞–¥–æ–∫: {e}")
            return [] 

    async def get_all_creativity(self, creativity_type: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    "SELECT id, title, description, video_url FROM creativity_videos WHERE type = ?",
                    (creativity_type,)
                )
                items = await cursor.fetchall()
                return [dict(item) for item in items]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞: {e}")
            return [] 

    async def get_all_tongue_twisters(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                cursor = await db.execute(
                    "SELECT id, text FROM tongue_twisters"
                )
                twisters = await cursor.fetchall()
                return [dict(twister) for twister in twisters]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫: {e}")
            return [] 

    async def add_riddle(self, question: str, answer: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–≥–∞–¥–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT INTO riddles (question, answer) VALUES (?, ?)",
                    (question, answer)
                )
                await db.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–≥–∞–¥–∫–∏: {e}")
            return False 

    async def add_daily_task(self, task_text: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT INTO daily_tasks (task_text) VALUES (?)",
                    (task_text,)
                )
                await db.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
            return False

    async def add_tongue_twister(self, text: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT INTO tongue_twisters (text) VALUES (?)",
                    (text,)
                )
                await db.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏: {e}")
            return False 

    async def add_exercise_video(self, title: str, description: str, video_url: str, video_type: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT INTO exercise_videos (type, title, description, video_url)
                    VALUES (?, ?, ?, ?)
                """, (video_type, title, description, video_url))
                await db.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            return False 