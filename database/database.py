import aiosqlite
from datetime import datetime
from typing import Optional, List, Dict
from config import config
import re

class Database:
    def __init__(self, db_path: str = config.DATABASE_PATH):
        self.db_path = db_path

    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        async with aiosqlite.connect(self.db_path) as db:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    full_name TEXT NOT NULL,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS achievements (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    token_id INTEGER,
                    count INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (token_id) REFERENCES tokens (id)
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tokens (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    emoji TEXT NOT NULL,
                    name TEXT NOT NULL,
                    description TEXT NOT NULL
                )
            ''')

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            async with db.execute('SELECT COUNT(*) FROM tokens') as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    default_tokens = [
                        ("üîë", "–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞", "–î–∞—ë—Ç—Å—è –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥"),
                        ("‚≠ê", "–ó–≤–µ–∑–¥–∞ –¥–Ω—è", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å"),
                        ("üß©", "–ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–±—É—Å–æ–≤"),
                        ("üëÑ", "–ì–æ–≤–æ—Ä—É–Ω", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫"),
                        ("üß†", "–£–º–Ω–∏–∫", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"),
                        ("ü§∏", "–ì–∏–º–Ω–∞—Å—Ç", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª—è—Ä–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"),
                        ("‚ùì", "–ú—É–¥—Ä–µ—Ü", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥–∞–¥–æ–∫"),
                        ("üèÜ", "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å")
                    ]
                    await db.executemany(
                        'INSERT INTO tokens (emoji, name, description) VALUES (?, ?, ?)',
                        default_tokens
                    )
            await db.commit()

    async def get_all_tokens(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('SELECT * FROM tokens') as cursor:
                tokens = await cursor.fetchall()
                return [{
                    'id': token[0],
                    'emoji': token[1],
                    'name': token[2],
                    'description': token[3]
                } for token in tokens]

    async def update_token(self, token_id: int, emoji: str, name: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'UPDATE tokens SET emoji = ?, name = ? WHERE id = ?',
                    (emoji, name, token_id)
                )
                await db.commit()
                return True
        except Exception:
            return False

    @staticmethod
    def is_valid_emoji(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–∏–µ)
        return len(text) == 1 and ord(text) > 1000

    @staticmethod
    def is_valid_name(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        return bool(re.match(r'^[–∞-—è–ê-–Øa-zA-Z\s]+$', text))

    async def add_user(self, telegram_id: int, username: Optional[str], full_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT OR IGNORE INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)',
                    (telegram_id, username, full_name)
                )
                await db.commit()
                return True
        except Exception:
            return False

    async def get_user(self, telegram_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                'SELECT * FROM users WHERE telegram_id = ?',
                (telegram_id,)
            ) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        'id': result[0],
                        'telegram_id': result[1],
                        'username': result[2],
                        'full_name': result[3],
                        'registration_date': result[4]
                    }
                return None

    async def get_all_users(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('SELECT * FROM users') as cursor:
                users = await cursor.fetchall()
                return [{
                    'id': user[0],
                    'telegram_id': user[1],
                    'username': user[2],
                    'full_name': user[3],
                    'registration_date': user[4]
                } for user in users]

    async def get_user_achievements(self, user_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            tokens = await self.get_all_tokens()
            for token in tokens:
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, ?, 0)
                ''', (user_id, token['id']))
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
            async with db.execute('''
                SELECT token_id, count FROM achievements
                WHERE user_id = ?
            ''', (user_id,)) as cursor:
                achievements = await cursor.fetchall()
                return {ach[0]: ach[1] for ach in achievements} 