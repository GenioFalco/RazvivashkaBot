import aiosqlite
from datetime import datetime, date
from typing import Optional, List, Dict, Tuple
from config import config
import re
import random
import asyncio

class Database:
    def __init__(self, db_path: str = config.DATABASE_PATH):
        self.db_path = db_path

    async def initialize_videos(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞"""
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
            async with db.execute("SELECT COUNT(*) FROM exercise_videos") as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
                    await db.executemany(
                        "INSERT INTO exercise_videos (type, title, description, video_url) VALUES (?, ?, ?, ?)",
                        [
                            ('neuro', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–õ–µ–Ω–∏–≤—ã–µ –≤–æ—Å—å–º–µ—Ä–∫–∏"', 
                             '–≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∏ –∞–∫—Ç–∏–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–∞ –ø–æ–ª—É—à–∞—Ä–∏—è –º–æ–∑–≥–∞.',
                             'https://drive.google.com/file/d/14saDv4CTTVuDpX6gtIK_O5ISVP6ypq5P/view?usp=sharing'),
                            ('articular', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "–í–µ—Å–µ–ª—ã–π —è–∑—ã—á–æ–∫"',
                             '–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –¥–ª—è —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤.',
                             'https://drive.google.com/file/d/1gpzwEbZS9SIFyvgm6rz4ItChgrXW7pLV/view?usp=sharing')
                        ]
                    )
                    await db.commit()

    async def create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect(self.db_path) as db:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    full_name TEXT NOT NULL,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS achievements (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    token_id INTEGER,
                    count INTEGER DEFAULT 0,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (token_id) REFERENCES tokens (id),
                    UNIQUE(user_id, token_id)
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tokens (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    emoji TEXT NOT NULL,
                    name TEXT NOT NULL,
                    description TEXT NOT NULL
                )
            ''')

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            async with db.execute('SELECT COUNT(*) FROM tokens') as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    default_tokens = [
                        ("üîë", "–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞", "–î–∞—ë—Ç—Å—è –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥"),
                        ("‚≠ê", "–ó–≤–µ–∑–¥–∞ –¥–Ω—è", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å"),
                        ("üß©", "–ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–±—É—Å–æ–≤"),
                        ("üëÑ", "–ì–æ–≤–æ—Ä—É–Ω", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫"),
                        ("üß†", "–£–º–Ω–∏–∫", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"),
                        ("ü§∏", "–ì–∏–º–Ω–∞—Å—Ç", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª—è—Ä–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"),
                        ("‚ùì", "–ú—É–¥—Ä–µ—Ü", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥–∞–¥–æ–∫"),
                        ("üèÜ", "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è", "–î–∞—ë—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å")
                    ]
                    await db.executemany(
                        'INSERT INTO tokens (emoji, name, description) VALUES (?, ?, ?)',
                        default_tokens
                    )

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS daily_tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    task_text TEXT NOT NULL
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_daily_tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    task_id INTEGER,
                    completed BOOLEAN DEFAULT FALSE,
                    date DATE NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (task_id) REFERENCES daily_tasks (id)
                )
            ''')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            async with db.execute('SELECT COUNT(*) FROM daily_tasks') as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    default_tasks = [
                        ("–°–¥–µ–ª–∞–π –∞–ø–ø–ª–∏–∫–∞—Ü–∏—é –∏–∑ –≤–µ—Ç–æ–∫",),
                        ("–ù–∞—Ä–∏—Å—É–π —Å–≤–æ—é –ª—é–±–∏–º—É—é –∏–≥—Ä—É—à–∫—É",),
                        ("–°–¥–µ–ª–∞–π –∑–∞—Ä—è–¥–∫—É –≤–º–µ—Å—Ç–µ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏",),
                        ("–°–ø–æ–π —Å–≤–æ—é –ª—é–±–∏–º—É—é –ø–µ—Å–µ–Ω–∫—É",),
                        ("–°–æ–±–µ—Ä–∏ –ø–∞–∑–ª",),
                        ("–ü–æ—Å—Ç—Ä–æ–π –¥–æ–º–∏–∫ –∏–∑ –ø–æ–¥—É—à–µ–∫",),
                        ("–ù–∞—Ä–∏—Å—É–π —Ä–∞–¥—É–≥—É",),
                        ("–°–¥–µ–ª–∞–π –æ—Ç–∫—Ä—ã—Ç–∫—É –¥–ª—è –¥—Ä—É–≥–∞",),
                        ("–ü–æ–∫–æ—Ä–º–∏ –ø—Ç–∏—á–µ–∫",),
                        ("–ü–æ–º–æ–≥–∏ –º–∞–º–µ –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã",)
                    ]
                    await db.executemany(
                        'INSERT INTO daily_tasks (task_text) VALUES (?)',
                        default_tasks
                    )

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥–∞–¥–æ–∫
            await db.execute('''
                CREATE TABLE IF NOT EXISTS riddles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question TEXT NOT NULL,
                    answer TEXT NOT NULL
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥–∞–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_riddles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    riddle_id INTEGER,
                    completed BOOLEAN DEFAULT FALSE,
                    date DATE NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (riddle_id) REFERENCES riddles (id)
                )
            ''')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–≥–∞–¥–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            async with db.execute('SELECT COUNT(*) FROM riddles') as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    default_riddles = [
                        ("–ù–µ –ª–∞–µ—Ç, –Ω–µ –∫—É—Å–∞–µ—Ç, –∞ –≤ –¥–æ–º –Ω–µ –ø—É—Å–∫–∞–µ—Ç?", "–ó–∞–º–æ–∫"),
                        ("–î–≤–∞ –∫–æ–ª—å—Ü–∞, –¥–≤–∞ –∫–æ–Ω—Ü–∞, –∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –≥–≤–æ–∑–¥–∏–∫.", "–ù–æ–∂–Ω–∏—Ü—ã"),
                        ("–°–∏–¥–∏—Ç –¥–µ–¥, –≤–æ —Å—Ç–æ —à—É–± –æ–¥–µ—Ç. –ö—Ç–æ –µ–≥–æ —Ä–∞–∑–¥–µ–≤–∞–µ—Ç, —Ç–æ—Ç —Å–ª–µ–∑—ã –ø—Ä–æ–ª–∏–≤–∞–µ—Ç.", "–õ—É–∫"),
                        ("–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º.", "–Å–ª–∫–∞"),
                        ("–ë–µ–∑ –æ–∫–æ–Ω, –±–µ–∑ –¥–≤–µ—Ä–µ–π, –ø–æ–ª–Ω–∞ –≥–æ—Ä–Ω–∏—Ü–∞ –ª—é–¥–µ–π.", "–û–≥—É—Ä–µ—Ü"),
                        ("–ö—Ä–∞—Å–Ω–∞—è –¥–µ–≤–∏—Ü–∞ —Å–∏–¥–∏—Ç –≤ —Ç–µ–º–Ω–∏—Ü–µ, –∞ –∫–æ—Å–∞ –Ω–∞ —É–ª–∏—Ü–µ.", "–ú–æ—Ä–∫–æ–≤—å"),
                        ("–í–∏—Å–∏—Ç –≥—Ä—É—à–∞, –Ω–µ–ª—å–∑—è —Å–∫—É—à–∞—Ç—å.", "–õ–∞–º–ø–æ—á–∫–∞"),
                        ("–ù–µ –µ–∑–¥–æ–∫, –∞ —Å–æ —à–ø–æ—Ä–∞–º–∏, –Ω–µ —Å—Ç–æ—Ä–æ–∂, –∞ –≤—Å–µ—Ö –±—É–¥–∏—Ç.", "–ü–µ—Ç—É—Ö"),
                        ("–ö—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –∫—Ç–æ —É—Ö–æ–¥–∏—Ç, –≤—Å–µ –µ–µ –∑–∞ —Ä—É—á–∫—É –≤–æ–¥—è—Ç.", "–î–≤–µ—Ä—å"),
                        ("–°—Ç–æ–∏—Ç –¥—É–±, –≤ –Ω–µ–º –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å –≥–Ω–µ–∑–¥, –≤ –∫–∞–∂–¥–æ–º –≥–Ω–µ–∑–¥–µ –ø–æ —á–µ—Ç—ã—Ä–µ —è–π—Ü–∞, –≤ –∫–∞–∂–¥–æ–º —è–π—Ü–µ –ø–æ —Å–µ–º—å —Ü—ã–ø–ª–µ–Ω–∫–æ–≤.", "–ì–æ–¥")
                    ]
                    await db.executemany(
                        'INSERT INTO riddles (question, answer) VALUES (?, ?)',
                        default_riddles
                    )

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            await db.execute("""
                CREATE TABLE IF NOT EXISTS exercise_videos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type TEXT NOT NULL,  -- 'neuro' –∏–ª–∏ 'articular'
                    title TEXT NOT NULL,
                    description TEXT NOT NULL,
                    video_url TEXT NOT NULL
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            await db.execute("""
                CREATE TABLE IF NOT EXISTS user_exercise_views (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    video_id INTEGER,
                    status TEXT NOT NULL,  -- 'full', 'partial', –∏–ª–∏ 'not_done'
                    date DATE NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (video_id) REFERENCES exercise_videos (id)
                )
            """)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–±—É—Å–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS puzzles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    image_path TEXT NOT NULL,
                    answer1 TEXT NOT NULL,
                    answer2 TEXT NOT NULL,
                    answer3 TEXT NOT NULL
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–µ–±—É—Å–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_puzzles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    puzzle_id INTEGER,
                    solved1 BOOLEAN DEFAULT FALSE,
                    solved2 BOOLEAN DEFAULT FALSE,
                    solved3 BOOLEAN DEFAULT FALSE,
                    date DATE NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (puzzle_id) REFERENCES puzzles (id)
                )
            ''')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ–±—É—Å—ã, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            async with db.execute('SELECT COUNT(*) FROM puzzles') as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    default_puzzles = [
                        ('1.jpg', '–≤–æ–¥–æ–ø–∞–¥', '–ª–∏—Å—Ç–æ–ø–∞–¥', '—Å–Ω–µ–≥–æ–ø–∞–¥'),
                        ('2.jpg', '–ø–æ–¥–≤–∞–ª', '–ø–æ–¥—ä–µ–∑–¥', '–ø–æ–¥—ä–µ–º'),
                        ('3.jpg', '–∑–∞—Å–ª–æ–Ω–∫–∞', '–∑–∞—Å—Ç–∞–≤–∞', '–∑–∞—Å—Ç–∞–≤–∫–∞')
                    ]
                    await db.executemany(
                        'INSERT INTO puzzles (image_path, answer1, answer2, answer3) VALUES (?, ?, ?, ?)',
                        default_puzzles
                    )

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tongue_twisters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    text TEXT NOT NULL
                )
            ''')

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_tongue_twisters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    twister_id INTEGER,
                    completed BOOLEAN DEFAULT FALSE,
                    date DATE NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (telegram_id),
                    FOREIGN KEY (twister_id) REFERENCES tongue_twisters (id)
                )
            ''')

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            async with db.execute('SELECT COUNT(*) FROM tongue_twisters') as cursor:
                count = await cursor.fetchone()
                if count[0] == 0:
                    default_twisters = [
                        ("–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ –∏ —Å–æ—Å–∞–ª–∞ —Å—É—à–∫—É",),
                        ("–ö–∞—Ä–ª —É –ö–ª–∞—Ä—ã —É–∫—Ä–∞–ª –∫–æ—Ä–∞–ª–ª—ã, –∞ –ö–ª–∞—Ä–∞ —É –ö–∞—Ä–ª–∞ —É–∫—Ä–∞–ª–∞ –∫–ª–∞—Ä–Ω–µ—Ç",),
                        ("–ù–∞ –¥–≤–æ—Ä–µ —Ç—Ä–∞–≤–∞, –Ω–∞ —Ç—Ä–∞–≤–µ –¥—Ä–æ–≤–∞",),
                        ("–ï—Ö–∞–ª –ì—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∫—É, –≤–∏–¥–∏—Ç –ì—Ä–µ–∫–∞ –≤ —Ä–µ–∫–µ —Ä–∞–∫",),
                        ("–ß–µ—Ç—ã—Ä–µ —á—ë—Ä–Ω–µ–Ω—å–∫–∏—Ö —á—É–º–∞–∑–µ–Ω—å–∫–∏—Ö —á–µ—Ä—Ç—ë–Ω–∫–∞ —á–µ—Ä—Ç–∏–ª–∏ —á—ë—Ä–Ω—ã–º–∏ —á–µ—Ä–Ω–∏–ª–∞–º–∏ —á–µ—Ä—Ç—ë–∂",),
                        ("–û—Ç —Ç–æ–ø–æ—Ç–∞ –∫–æ–ø—ã—Ç –ø—ã–ª—å –ø–æ –ø–æ–ª—é –ª–µ—Ç–∏—Ç",),
                        ("–ë—ã–∫ —Ç—É–ø–æ–≥—É–±, —Ç—É–ø–æ–≥—É–±–µ–Ω—å–∫–∏–π –±—ã—á–æ–∫, —É –±—ã–∫–∞ –±–µ–ª–∞ –≥—É–±–∞ –±—ã–ª–∞ —Ç—É–ø–∞",),
                        ("–¢—Ä–∏ —Å–æ—Ä–æ–∫–∏-—Ç–∞—Ä–∞—Ç–æ—Ä–∫–∏ —Ç–∞—Ä–∞—Ç–æ—Ä–∏–ª–∏ –Ω–∞ –≥–æ—Ä–∫–µ",),
                        ("–†—ã–ª–∞ —Å–≤–∏–Ω—å—è –±–µ–ª–æ—Ä—ã–ª–∞, —Ç—É–ø–æ—Ä—ã–ª–∞; –ø–æ–ª–¥–≤–æ—Ä–∞ —Ä—ã–ª–æ–º –∏–∑—Ä—ã–ª–∞, –≤—ã—Ä—ã–ª–∞, –ø–æ–¥—Ä—ã–ª–∞",),
                        ("–í—Å–µ—Ö —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫ –Ω–µ –ø–µ—Ä–µ—Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∏—à—å, –Ω–µ –ø–µ—Ä–µ–≤—ã—Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∏—à—å",)
                    ]
                    await db.executemany(
                        'INSERT INTO tongue_twisters (text) VALUES (?)',
                        default_twisters
                    )
            
            await db.commit()
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        await self.initialize_videos()

    async def get_all_tokens(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('SELECT * FROM tokens') as cursor:
                tokens = await cursor.fetchall()
                return [{
                    'id': token[0],
                    'emoji': token[1],
                    'name': token[2],
                    'description': token[3]
                } for token in tokens]

    async def update_token(self, token_id: int, new_emoji: str, new_name: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'UPDATE tokens SET emoji = ?, name = ? WHERE id = ?',
                    (new_emoji, new_name, token_id)
                )
                await db.commit()
                return True
        except Exception:
            return False

    @staticmethod
    def is_valid_emoji(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–∏–µ)
        return len(text) == 1 and ord(text) > 1000

    @staticmethod
    def is_valid_name(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        return bool(re.match(r'^[–∞-—è–ê-–Øa-zA-Z\s]+$', text))

    async def add_user(self, telegram_id: int, username: Optional[str], full_name: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    'INSERT OR IGNORE INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)',
                    (telegram_id, username, full_name)
                )
                await db.commit()
                return True
        except Exception:
            return False

    async def get_user(self, telegram_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                'SELECT * FROM users WHERE telegram_id = ?',
                (telegram_id,)
            ) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        'id': result[0],
                        'telegram_id': result[1],
                        'username': result[2],
                        'full_name': result[3],
                        'registration_date': result[4]
                    }
                return None

    async def get_all_users(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('SELECT * FROM users') as cursor:
                users = await cursor.fetchall()
                return [{
                    'id': user[0],
                    'telegram_id': user[1],
                    'username': user[2],
                    'full_name': user[3],
                    'registration_date': user[4]
                } for user in users]

    async def get_user_achievements(self, user_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            tokens = await self.get_all_tokens()
            for token in tokens:
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, ?, 0)
                ''', (user_id, token['id']))
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
            async with db.execute('''
                SELECT token_id, count FROM achievements
                WHERE user_id = ?
            ''', (user_id,)) as cursor:
                achievements = await cursor.fetchall()
                return {ach[0]: ach[1] for ach in achievements}

    async def get_user_daily_tasks(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_daily_tasks 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                async with db.execute('SELECT COUNT(*) FROM daily_tasks') as cursor:
                    total_tasks = (await cursor.fetchone())[0]
                    if total_tasks < 5:
                        return [], 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                
                # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                async with db.execute('SELECT id, task_text FROM daily_tasks') as cursor:
                    all_tasks = await cursor.fetchall()
                    selected_tasks = random.sample(all_tasks, 5)
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for task in selected_tasks:
                    await db.execute('''
                        INSERT INTO user_daily_tasks (user_id, task_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, task[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT dt.id, dt.task_text, udt.completed 
                FROM daily_tasks dt
                JOIN user_daily_tasks udt ON dt.id = udt.task_id
                WHERE udt.user_id = ? AND udt.date = ?
            ''', (user_id, today)) as cursor:
                tasks = await cursor.fetchall()
                tasks_list = [{
                    'id': task[0],
                    'text': task[1],
                    'completed': bool(task[2])
                } for task in tasks]
                completed_count = sum(1 for task in tasks_list if task['completed'])
                
                return tasks_list, completed_count

    async def get_token_count(self, user_id: int, token_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute('''
                SELECT count FROM achievements
                WHERE user_id = ? AND token_id = ?
            ''', (user_id, token_id)) as cursor:
                result = await cursor.fetchone()
                return result[0] if result else 0

    async def debug_achievements(self, user_id: int):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã achievements"""
        async with aiosqlite.connect(self.db_path) as db:
            print("\nDebug achievements table:")
            async with db.execute('''
                SELECT a.user_id, a.token_id, a.count, t.name
                FROM achievements a
                JOIN tokens t ON a.token_id = t.id
                WHERE a.user_id = ?
            ''', (user_id,)) as cursor:
                rows = await cursor.fetchall()
                for row in rows:
                    print(f"User {row[0]}, Token {row[1]} ({row[3]}): {row[2]} —à—Ç.")
            
            print("\nDebug user_daily_tasks table:")
            today = date.today()
            async with db.execute('''
                SELECT task_id, completed
                FROM user_daily_tasks
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                rows = await cursor.fetchall()
                for row in rows:
                    print(f"Task {row[0]}: {'Completed' if row[1] else 'Not completed'}")

    async def complete_daily_task(self, user_id: int, task_id: int) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                today = date.today()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                async with db.execute('''
                    SELECT completed FROM user_daily_tasks
                    WHERE user_id = ? AND task_id = ? AND date = ?
                ''', (user_id, task_id, today)) as cursor:
                    result = await cursor.fetchone()
                    if result and result[0]:
                        return False  # –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                await db.execute('''
                    UPDATE user_daily_tasks 
                    SET completed = TRUE 
                    WHERE user_id = ? AND task_id = ? AND date = ?
                ''', (user_id, task_id, today))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ achievements –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ó–≤–µ–∑–¥–∞ –¥–Ω—è"
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, 2, 0)
                ''', (user_id,))
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                await db.execute('''
                    UPDATE achievements 
                    SET count = count + 1,
                        last_updated = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND token_id = 2
                ''', (user_id,))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                async with db.execute('''
                    SELECT COUNT(*) FROM user_daily_tasks
                    WHERE user_id = ? AND date = ? AND completed = TRUE
                ''', (user_id, today)) as cursor:
                    completed_count = (await cursor.fetchone())[0]
                    
                # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ 5 –∑–∞–¥–∞–Ω–∏–π, –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                if completed_count == 5:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è"
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, 8, 0)
                    ''', (user_id,))
                    
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = 8
                    ''', (user_id,))
                
                await db.commit()
                print(f"Completing task {task_id} for user {user_id}")
                print(f"Task completion success: True")
                print(f"Completed tasks count: {completed_count}")
                return True
        except Exception as e:
            print(f"Error in complete_daily_task: {e}")
            return False 

    async def get_token_by_id(self, token_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –ø–æ –µ–≥–æ id."""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                "SELECT * FROM tokens WHERE id = ?",
                (token_id,)
            ) as cursor:
                token = await cursor.fetchone()
                if token:
                    return dict(token)
                return None 

    async def add_achievement(self, user_id: int, token_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        max_retries = 3
        retry_delay = 0.1  # 100ms
        
        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(self.db_path) as db:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, ?, 0)
                    ''', (user_id, token_id))
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = ?
                    ''', (user_id, token_id))
                    
                    await db.commit()
                    return True
            except Exception as e:
                if "database is locked" in str(e) and attempt < max_retries - 1:
                    print(f"Database locked, retrying... (attempt {attempt + 1})")
                    await asyncio.sleep(retry_delay * (attempt + 1))
                    continue
                print(f"Error in add_achievement: {e}")
                return False
        return False

    async def get_random_token(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                db.row_factory = aiosqlite.Row
                async with db.execute(
                    "SELECT * FROM tokens WHERE id != 8 ORDER BY RANDOM() LIMIT 1"
                ) as cursor:
                    token = await cursor.fetchone()
                    if token:
                        return dict(token)
                    return None
        except Exception as e:
            print(f"Error in get_random_token: {e}")
            return None 

    async def get_user_riddles(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥–∞–¥–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_riddles 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
                async with db.execute('SELECT id, question, answer FROM riddles ORDER BY RANDOM() LIMIT 5') as cursor:
                    selected_riddles = await cursor.fetchall()
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for riddle in selected_riddles:
                    await db.execute('''
                        INSERT INTO user_riddles (user_id, riddle_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, riddle[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT r.id, r.question, r.answer, ur.completed 
                FROM riddles r
                JOIN user_riddles ur ON r.id = ur.riddle_id
                WHERE ur.user_id = ? AND ur.date = ?
                ORDER BY ur.id
            ''', (user_id, today)) as cursor:
                riddles = await cursor.fetchall()
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
            async with db.execute('''
                SELECT COUNT(*) FROM user_riddles
                WHERE user_id = ? AND date = ? AND completed = TRUE
            ''', (user_id, today)) as cursor:
                completed_count = (await cursor.fetchone())[0]
                
            return [{
                'id': riddle[0],
                'question': riddle[1],
                'answer': riddle[2],
                'completed': riddle[3]
            } for riddle in riddles], completed_count

    async def check_riddle_answer(self, user_id: int, riddle_id: int, answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É –∏ –æ—Ç–º–µ—á–∞–µ—Ç –µ—ë –∫–∞–∫ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—É—é –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            async with db.execute('''
                SELECT r.answer FROM riddles r
                JOIN user_riddles ur ON r.id = ur.riddle_id
                WHERE ur.user_id = ? AND ur.riddle_id = ? AND ur.date = ?
            ''', (user_id, riddle_id, today)) as cursor:
                result = await cursor.fetchone()
                if not result:
                    return False
                
                correct_answer = result[0].lower()
                user_answer = answer.lower()
                
                if correct_answer == user_answer:
                    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–≥–∞–¥–∫—É –∫–∞–∫ —Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—É—é
                    await db.execute('''
                        UPDATE user_riddles 
                        SET completed = TRUE
                        WHERE user_id = ? AND riddle_id = ? AND date = ?
                    ''', (user_id, riddle_id, today))
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ú—É–¥—Ä–µ—Ü" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, 7, 0)
                    ''', (user_id,))
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑–≥–∞–¥–∫—É
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = 7
                    ''', (user_id,))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–≥–∞–¥–∫–∏ —Ä–∞–∑–≥–∞–¥–∞–Ω—ã
                    async with db.execute('''
                        SELECT COUNT(*) FROM user_riddles
                        WHERE user_id = ? AND date = ? AND completed = TRUE
                    ''', (user_id, today)) as cursor:
                        completed_count = (await cursor.fetchone())[0]
                        
                        if completed_count == 5:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                            await db.execute('''
                                INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                                VALUES (?, 8, 0)
                            ''', (user_id,))
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–Ω–∞–≥—Ä–∞–¥—É
                            await db.execute('''
                                UPDATE achievements 
                                SET count = count + 1,
                                    last_updated = CURRENT_TIMESTAMP
                                WHERE user_id = ? AND token_id = 8
                            ''', (user_id,))
                    
                    await db.commit()
                    return True
                return False

    async def spend_token(self, user_id: int, token_id: int) -> bool:
        """–¢—Ä–∞—Ç–∏—Ç –∂–µ—Ç–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
                async with db.execute('''
                    SELECT count FROM achievements
                    WHERE user_id = ? AND token_id = ?
                ''', (user_id, token_id)) as cursor:
                    result = await cursor.fetchone()
                    if not result or result[0] <= 0:
                        return False
                    
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤
                await db.execute('''
                    UPDATE achievements
                    SET count = count - 1
                    WHERE user_id = ? AND token_id = ?
                ''', (user_id, token_id))
                
                await db.commit()
                return True
        except Exception:
            return False 

    async def get_next_exercise_video(self, user_id: int, exercise_type: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            cursor = await db.execute("""
                SELECT v.*, 
                       (SELECT status FROM user_exercise_views 
                        WHERE user_id = ? AND video_id = v.id 
                        AND date(date) = date(?) 
                        ORDER BY id DESC LIMIT 1) as view_status,
                       (SELECT COUNT(*) FROM user_exercise_views 
                        WHERE user_id = ? AND video_id = v.id 
                        AND date(date) = date(?) 
                        AND (status = 'full' OR status = 'partial')) as completed_today
                FROM exercise_videos v
                WHERE v.type = ?
                ORDER BY v.id
                LIMIT 1
            """, (user_id, today, user_id, today, exercise_type))
            
            video = await cursor.fetchone()
            if video:
                result = dict(video)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                result['already_viewed'] = result.get('completed_today', 0) > 0
                result['view_status'] = result.get('view_status')
                return result
            return None

    async def record_exercise_view(self, user_id: int, video_id: int, status: str) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        max_retries = 3
        base_delay = 0.1  # 100ms
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
        if status == 'not_done':
            normalized_status = 'not_done'
        elif status == 'partial':
            normalized_status = 'partial'
        else:
            normalized_status = 'full'
        
        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(self.db_path) as db:
                    await db.execute(
                        """
                        INSERT INTO user_exercise_views (user_id, video_id, status, date)
                        VALUES (?, ?, ?, date('now'))
                        """,
                        (user_id, video_id, normalized_status)
                    )
                    await db.commit()
                    return
                    
            except Exception as e:
                delay = base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                print(f"Attempt {attempt + 1} failed. Retrying in {delay:.2f}s...")
                await asyncio.sleep(delay)
                continue
                
        print(f"Failed to record exercise view after {max_retries} attempts") 

    async def get_exercise_video(self, video_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ ID"""
        async with aiosqlite.connect(self.db_path) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                "SELECT * FROM exercise_videos WHERE id = ?",
                (video_id,)
            ) as cursor:
                video = await cursor.fetchone()
                if video:
                    return dict(video)
                return None 

    async def update_achievement(self, user_id: int, token_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω–∞
                async with db.execute(
                    'SELECT count FROM achievements WHERE user_id = ? AND token_id = ?',
                    (user_id, token_id)
                ) as cursor:
                    result = await cursor.fetchone()
                    
                if result is None:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    await db.execute(
                        'INSERT INTO achievements (user_id, token_id, count, last_updated) VALUES (?, ?, 1, CURRENT_TIMESTAMP)',
                        (user_id, token_id)
                    )
                else:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    await db.execute(
                        'UPDATE achievements SET count = count + 1, last_updated = CURRENT_TIMESTAMP WHERE user_id = ? AND token_id = ?',
                        (user_id, token_id)
                    )
                
                await db.commit()
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return False

    async def get_token_by_id(self, token_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –ø–æ –µ–≥–æ ID"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                'SELECT * FROM tokens WHERE id = ?',
                (token_id,)
            ) as cursor:
                token = await cursor.fetchone()
                if token:
                    return {
                        'id': token[0],
                        'emoji': token[1],
                        'name': token[2],
                        'description': token[3]
                    }
                return None 

    async def get_user_puzzles(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–±—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–±—É—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_puzzles 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–±—É—Å–∞
                async with db.execute('SELECT id, image_path, answer1, answer2, answer3 FROM puzzles ORDER BY RANDOM() LIMIT 3') as cursor:
                    selected_puzzles = await cursor.fetchall()
                    
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for puzzle in selected_puzzles:
                    await db.execute('''
                        INSERT INTO user_puzzles (user_id, puzzle_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, puzzle[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–±—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT p.id, p.image_path, p.answer1, p.answer2, p.answer3,
                       up.solved1, up.solved2, up.solved3
                FROM puzzles p
                JOIN user_puzzles up ON p.id = up.puzzle_id
                WHERE up.user_id = ? AND up.date = ?
                ORDER BY up.id
            ''', (user_id, today)) as cursor:
                puzzles = await cursor.fetchall()
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–µ–±—É—Å–æ–≤
            total_solved = sum(
                sum(1 for solved in puzzle[5:8] if solved)
                for puzzle in puzzles
            )
                
            return [{
                'id': puzzle[0],
                'image_path': puzzle[1],
                'answers': [puzzle[2], puzzle[3], puzzle[4]],
                'solved': [puzzle[5], puzzle[6], puzzle[7]]
            } for puzzle in puzzles], total_solved

    async def check_puzzle_answer(self, user_id: int, puzzle_id: int, rebus_number: int, answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–±—É—Å –∏ –æ—Ç–º–µ—á–∞–µ—Ç –µ–≥–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            async with db.execute('''
                SELECT answer1, answer2, answer3 FROM puzzles
                WHERE id = ?
            ''', (puzzle_id,)) as cursor:
                answers = await cursor.fetchone()
                if not answers:
                    return False
                
                correct_answer = answers[rebus_number - 1].lower()
                user_answer = answer.lower()
                
                if correct_answer == user_answer:
                    # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–±—É—Å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π
                    solved_field = f'solved{rebus_number}'
                    await db.execute(f'''
                        UPDATE user_puzzles 
                        SET {solved_field} = TRUE
                        WHERE user_id = ? AND puzzle_id = ? AND date = ?
                    ''', (user_id, puzzle_id, today))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ä–µ–±—É—Å—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Ä–µ—à–µ–Ω—ã
                    async with db.execute('''
                        SELECT solved1, solved2, solved3
                        FROM user_puzzles
                        WHERE user_id = ? AND puzzle_id = ? AND date = ?
                    ''', (user_id, puzzle_id, today)) as cursor:
                        solved_status = await cursor.fetchone()
                        all_solved = all(solved_status)
                        
                        if all_solved:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ú–∞—Å—Ç–µ—Ä —Ä–µ–±—É—Å–æ–≤" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                            await db.execute('''
                                INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                                VALUES (?, 3, 0)
                            ''', (user_id,))
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                            await db.execute('''
                                UPDATE achievements 
                                SET count = count + 1,
                                    last_updated = CURRENT_TIMESTAMP
                                WHERE user_id = ? AND token_id = 3
                            ''', (user_id,))
                    
                    await db.commit()
                    return True
                return False 

    async def get_user_tongue_twisters(self, user_id: int) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"""
        today = date.today()
        async with aiosqlite.connect(self.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            async with db.execute('''
                SELECT COUNT(*) FROM user_tongue_twisters 
                WHERE user_id = ? AND date = ?
            ''', (user_id, today)) as cursor:
                count = await cursor.fetchone()
                
            if count[0] == 0:
                # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏
                async with db.execute('SELECT id, text FROM tongue_twisters') as cursor:
                    all_twisters = await cursor.fetchall()
                    selected_twisters = random.sample(all_twisters, 3)
                    
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for twister in selected_twisters:
                    await db.execute('''
                        INSERT INTO user_tongue_twisters (user_id, twister_id, date)
                        VALUES (?, ?, ?)
                    ''', (user_id, twister[0], today))
                await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute('''
                SELECT tt.id, tt.text, utt.completed 
                FROM tongue_twisters tt
                JOIN user_tongue_twisters utt ON tt.id = utt.twister_id
                WHERE utt.user_id = ? AND utt.date = ?
            ''', (user_id, today)) as cursor:
                twisters = await cursor.fetchall()
                twisters_list = [{
                    'id': twister[0],
                    'text': twister[1],
                    'completed': bool(twister[2])
                } for twister in twisters]
                completed_count = sum(1 for twister in twisters_list if twister['completed'])
                
                return twisters_list, completed_count

    async def complete_tongue_twister(self, user_id: int, twister_id: int) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                today = date.today()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                async with db.execute('''
                    SELECT completed FROM user_tongue_twisters
                    WHERE user_id = ? AND twister_id = ? AND date = ?
                ''', (user_id, twister_id, today)) as cursor:
                    result = await cursor.fetchone()
                    if result and result[0]:
                        return False  # –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                
                # –û—Ç–º–µ—á–∞–µ–º —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                await db.execute('''
                    UPDATE user_tongue_twisters 
                    SET completed = TRUE 
                    WHERE user_id = ? AND twister_id = ? AND date = ?
                ''', (user_id, twister_id, today))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ achievements –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ì–æ–≤–æ—Ä—É–Ω"
                await db.execute('''
                    INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                    VALUES (?, 4, 0)
                ''', (user_id,))
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏
                await db.execute('''
                    UPDATE achievements 
                    SET count = count + 1,
                        last_updated = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND token_id = 4
                ''', (user_id,))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                async with db.execute('''
                    SELECT COUNT(*) FROM user_tongue_twisters
                    WHERE user_id = ? AND date = ? AND completed = TRUE
                ''', (user_id, today)) as cursor:
                    completed_count = (await cursor.fetchone())[0]
                    
                # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ 3 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏, –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                if completed_count == 3:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ "–ß–µ–º–ø–∏–æ–Ω –¥–Ω—è"
                    await db.execute('''
                        INSERT OR IGNORE INTO achievements (user_id, token_id, count)
                        VALUES (?, 8, 0)
                    ''', (user_id,))
                    
                    await db.execute('''
                        UPDATE achievements 
                        SET count = count + 1,
                            last_updated = CURRENT_TIMESTAMP
                        WHERE user_id = ? AND token_id = 8
                    ''', (user_id,))
                
                await db.commit()
                return True
        except Exception as e:
            print(f"Error in complete_tongue_twister: {e}")
            return False 